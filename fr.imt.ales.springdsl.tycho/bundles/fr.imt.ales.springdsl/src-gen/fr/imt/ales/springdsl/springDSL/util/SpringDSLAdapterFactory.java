/**
 * generated by Xtext 2.18.0
 */
package fr.imt.ales.springdsl.springDSL.util;

import fr.imt.ales.springdsl.springDSL.AbstractArtefact;
import fr.imt.ales.springdsl.springDSL.AbstractKeyValue;
import fr.imt.ales.springdsl.springDSL.Advise;
import fr.imt.ales.springdsl.springDSL.AfterAdvise;
import fr.imt.ales.springdsl.springDSL.AfterReturning;
import fr.imt.ales.springdsl.springDSL.AfterThowing;
import fr.imt.ales.springdsl.springDSL.Alias;
import fr.imt.ales.springdsl.springDSL.AnnotationConfig;
import fr.imt.ales.springdsl.springDSL.AopAdvisor;
import fr.imt.ales.springdsl.springDSL.AopAspect;
import fr.imt.ales.springdsl.springDSL.AopAspectJAutoproxy;
import fr.imt.ales.springdsl.springDSL.AopConfig;
import fr.imt.ales.springdsl.springDSL.AopDefaultImplInterface;
import fr.imt.ales.springdsl.springDSL.AopDelegateImplRef;
import fr.imt.ales.springdsl.springDSL.AopInclude;
import fr.imt.ales.springdsl.springDSL.AopPointcut;
import fr.imt.ales.springdsl.springDSL.AopScopedProxy;
import fr.imt.ales.springdsl.springDSL.AroundAdvise;
import fr.imt.ales.springdsl.springDSL.Array;
import fr.imt.ales.springdsl.springDSL.Aspect;
import fr.imt.ales.springdsl.springDSL.Attribute;
import fr.imt.ales.springdsl.springDSL.BeforeAdvise;
import fr.imt.ales.springdsl.springDSL.ClassOrFactory;
import fr.imt.ales.springdsl.springDSL.Collection;
import fr.imt.ales.springdsl.springDSL.Component;
import fr.imt.ales.springdsl.springDSL.ComponentScan;
import fr.imt.ales.springdsl.springDSL.Configuration;
import fr.imt.ales.springdsl.springDSL.Context;
import fr.imt.ales.springdsl.springDSL.CreationMethod;
import fr.imt.ales.springdsl.springDSL.DataString;
import fr.imt.ales.springdsl.springDSL.DeclareParents;
import fr.imt.ales.springdsl.springDSL.ExcludeFilter;
import fr.imt.ales.springdsl.springDSL.Factory;
import fr.imt.ales.springdsl.springDSL.Feature;
import fr.imt.ales.springdsl.springDSL.Import;
import fr.imt.ales.springdsl.springDSL.IncludeFilter;
import fr.imt.ales.springdsl.springDSL.Interface;
import fr.imt.ales.springdsl.springDSL.Key;
import fr.imt.ales.springdsl.springDSL.LoadTimeWeaver;
import fr.imt.ales.springdsl.springDSL.LookupMethod;
import fr.imt.ales.springdsl.springDSL.MVC;
import fr.imt.ales.springdsl.springDSL.Map;
import fr.imt.ales.springdsl.springDSL.MapEntry;
import fr.imt.ales.springdsl.springDSL.MbeanExport;
import fr.imt.ales.springdsl.springDSL.MbeanServer;
import fr.imt.ales.springdsl.springDSL.Meta;
import fr.imt.ales.springdsl.springDSL.Prop;
import fr.imt.ales.springdsl.springDSL.PropertyFile;
import fr.imt.ales.springdsl.springDSL.PropertyHolder;
import fr.imt.ales.springdsl.springDSL.PropertyOverride;
import fr.imt.ales.springdsl.springDSL.PropertyPlaceholder;
import fr.imt.ales.springdsl.springDSL.Props;
import fr.imt.ales.springdsl.springDSL.Qualifier;
import fr.imt.ales.springdsl.springDSL.QualifierAttribute;
import fr.imt.ales.springdsl.springDSL.Reference;
import fr.imt.ales.springdsl.springDSL.SpringConfigured;
import fr.imt.ales.springdsl.springDSL.SpringDSLPackage;
import fr.imt.ales.springdsl.springDSL.SpringProject;
import fr.imt.ales.springdsl.springDSL.TxAdvise;
import fr.imt.ales.springdsl.springDSL.TxAttribute;
import fr.imt.ales.springdsl.springDSL.TxJtaTransactionManager;
import fr.imt.ales.springdsl.springDSL.TxMethod;
import fr.imt.ales.springdsl.springDSL.UtilConstant;
import fr.imt.ales.springdsl.springDSL.UtilList;
import fr.imt.ales.springdsl.springDSL.UtilMap;
import fr.imt.ales.springdsl.springDSL.UtilProperties;
import fr.imt.ales.springdsl.springDSL.UtilPropertyPath;
import fr.imt.ales.springdsl.springDSL.UtilSet;
import fr.imt.ales.springdsl.springDSL.sList;
import fr.imt.ales.springdsl.springDSL.sSet;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see fr.imt.ales.springdsl.springDSL.SpringDSLPackage
 * @generated
 */
public class SpringDSLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SpringDSLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SpringDSLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = SpringDSLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SpringDSLSwitch<Adapter> modelSwitch =
    new SpringDSLSwitch<Adapter>()
    {
      @Override
      public Adapter caseSpringProject(SpringProject object)
      {
        return createSpringProjectAdapter();
      }
      @Override
      public Adapter caseAbstractKeyValue(AbstractKeyValue object)
      {
        return createAbstractKeyValueAdapter();
      }
      @Override
      public Adapter caseAbstractArtefact(AbstractArtefact object)
      {
        return createAbstractArtefactAdapter();
      }
      @Override
      public Adapter caseCollection(Collection object)
      {
        return createCollectionAdapter();
      }
      @Override
      public Adapter caseConfiguration(Configuration object)
      {
        return createConfigurationAdapter();
      }
      @Override
      public Adapter caseMVC(MVC object)
      {
        return createMVCAdapter();
      }
      @Override
      public Adapter caseAlias(Alias object)
      {
        return createAliasAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseContext(Context object)
      {
        return createContextAdapter();
      }
      @Override
      public Adapter caseAnnotationConfig(AnnotationConfig object)
      {
        return createAnnotationConfigAdapter();
      }
      @Override
      public Adapter caseComponentScan(ComponentScan object)
      {
        return createComponentScanAdapter();
      }
      @Override
      public Adapter caseIncludeFilter(IncludeFilter object)
      {
        return createIncludeFilterAdapter();
      }
      @Override
      public Adapter caseExcludeFilter(ExcludeFilter object)
      {
        return createExcludeFilterAdapter();
      }
      @Override
      public Adapter caseLoadTimeWeaver(LoadTimeWeaver object)
      {
        return createLoadTimeWeaverAdapter();
      }
      @Override
      public Adapter caseMbeanExport(MbeanExport object)
      {
        return createMbeanExportAdapter();
      }
      @Override
      public Adapter caseMbeanServer(MbeanServer object)
      {
        return createMbeanServerAdapter();
      }
      @Override
      public Adapter casePropertyHolder(PropertyHolder object)
      {
        return createPropertyHolderAdapter();
      }
      @Override
      public Adapter casePropertyPlaceholder(PropertyPlaceholder object)
      {
        return createPropertyPlaceholderAdapter();
      }
      @Override
      public Adapter casePropertyOverride(PropertyOverride object)
      {
        return createPropertyOverrideAdapter();
      }
      @Override
      public Adapter caseSpringConfigured(SpringConfigured object)
      {
        return createSpringConfiguredAdapter();
      }
      @Override
      public Adapter caseAspect(Aspect object)
      {
        return createAspectAdapter();
      }
      @Override
      public Adapter caseAopAspectJAutoproxy(AopAspectJAutoproxy object)
      {
        return createAopAspectJAutoproxyAdapter();
      }
      @Override
      public Adapter caseAopInclude(AopInclude object)
      {
        return createAopIncludeAdapter();
      }
      @Override
      public Adapter caseAopConfig(AopConfig object)
      {
        return createAopConfigAdapter();
      }
      @Override
      public Adapter caseAopPointcut(AopPointcut object)
      {
        return createAopPointcutAdapter();
      }
      @Override
      public Adapter caseAopAdvisor(AopAdvisor object)
      {
        return createAopAdvisorAdapter();
      }
      @Override
      public Adapter caseAopAspect(AopAspect object)
      {
        return createAopAspectAdapter();
      }
      @Override
      public Adapter caseDeclareParents(DeclareParents object)
      {
        return createDeclareParentsAdapter();
      }
      @Override
      public Adapter caseInterface(Interface object)
      {
        return createInterfaceAdapter();
      }
      @Override
      public Adapter caseAopDefaultImplInterface(AopDefaultImplInterface object)
      {
        return createAopDefaultImplInterfaceAdapter();
      }
      @Override
      public Adapter caseAopDelegateImplRef(AopDelegateImplRef object)
      {
        return createAopDelegateImplRefAdapter();
      }
      @Override
      public Adapter caseAdvise(Advise object)
      {
        return createAdviseAdapter();
      }
      @Override
      public Adapter caseBeforeAdvise(BeforeAdvise object)
      {
        return createBeforeAdviseAdapter();
      }
      @Override
      public Adapter caseAfterAdvise(AfterAdvise object)
      {
        return createAfterAdviseAdapter();
      }
      @Override
      public Adapter caseAroundAdvise(AroundAdvise object)
      {
        return createAroundAdviseAdapter();
      }
      @Override
      public Adapter caseAfterReturning(AfterReturning object)
      {
        return createAfterReturningAdapter();
      }
      @Override
      public Adapter caseAfterThowing(AfterThowing object)
      {
        return createAfterThowingAdapter();
      }
      @Override
      public Adapter caseTxAdvise(TxAdvise object)
      {
        return createTxAdviseAdapter();
      }
      @Override
      public Adapter caseTxAttribute(TxAttribute object)
      {
        return createTxAttributeAdapter();
      }
      @Override
      public Adapter caseTxMethod(TxMethod object)
      {
        return createTxMethodAdapter();
      }
      @Override
      public Adapter caseTxJtaTransactionManager(TxJtaTransactionManager object)
      {
        return createTxJtaTransactionManagerAdapter();
      }
      @Override
      public Adapter caseComponent(Component object)
      {
        return createComponentAdapter();
      }
      @Override
      public Adapter caseCreationMethod(CreationMethod object)
      {
        return createCreationMethodAdapter();
      }
      @Override
      public Adapter caseClassOrFactory(ClassOrFactory object)
      {
        return createClassOrFactoryAdapter();
      }
      @Override
      public Adapter caseFactory(Factory object)
      {
        return createFactoryAdapter();
      }
      @Override
      public Adapter caseClass(fr.imt.ales.springdsl.springDSL.Class object)
      {
        return createClassAdapter();
      }
      @Override
      public Adapter caseAopScopedProxy(AopScopedProxy object)
      {
        return createAopScopedProxyAdapter();
      }
      @Override
      public Adapter caseFeature(Feature object)
      {
        return createFeatureAdapter();
      }
      @Override
      public Adapter caseAttribute(Attribute object)
      {
        return createAttributeAdapter();
      }
      @Override
      public Adapter caseReference(Reference object)
      {
        return createReferenceAdapter();
      }
      @Override
      public Adapter caseLookupMethod(LookupMethod object)
      {
        return createLookupMethodAdapter();
      }
      @Override
      public Adapter caseQualifier(Qualifier object)
      {
        return createQualifierAdapter();
      }
      @Override
      public Adapter caseMeta(Meta object)
      {
        return createMetaAdapter();
      }
      @Override
      public Adapter caseQualifierAttribute(QualifierAttribute object)
      {
        return createQualifierAttributeAdapter();
      }
      @Override
      public Adapter caseArray(Array object)
      {
        return createArrayAdapter();
      }
      @Override
      public Adapter casesList(sList object)
      {
        return createsListAdapter();
      }
      @Override
      public Adapter casesSet(sSet object)
      {
        return createsSetAdapter();
      }
      @Override
      public Adapter caseProps(Props object)
      {
        return createPropsAdapter();
      }
      @Override
      public Adapter caseProp(Prop object)
      {
        return createPropAdapter();
      }
      @Override
      public Adapter caseMap(Map object)
      {
        return createMapAdapter();
      }
      @Override
      public Adapter caseMapEntry(MapEntry object)
      {
        return createMapEntryAdapter();
      }
      @Override
      public Adapter caseKey(Key object)
      {
        return createKeyAdapter();
      }
      @Override
      public Adapter caseUtilConstant(UtilConstant object)
      {
        return createUtilConstantAdapter();
      }
      @Override
      public Adapter caseUtilPropertyPath(UtilPropertyPath object)
      {
        return createUtilPropertyPathAdapter();
      }
      @Override
      public Adapter caseUtilProperties(UtilProperties object)
      {
        return createUtilPropertiesAdapter();
      }
      @Override
      public Adapter caseUtilList(UtilList object)
      {
        return createUtilListAdapter();
      }
      @Override
      public Adapter caseUtilMap(UtilMap object)
      {
        return createUtilMapAdapter();
      }
      @Override
      public Adapter caseUtilSet(UtilSet object)
      {
        return createUtilSetAdapter();
      }
      @Override
      public Adapter casePropertyFile(PropertyFile object)
      {
        return createPropertyFileAdapter();
      }
      @Override
      public Adapter caseDataString(DataString object)
      {
        return createDataStringAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.SpringProject <em>Spring Project</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.SpringProject
   * @generated
   */
  public Adapter createSpringProjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.AbstractKeyValue <em>Abstract Key Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.AbstractKeyValue
   * @generated
   */
  public Adapter createAbstractKeyValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.AbstractArtefact <em>Abstract Artefact</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.AbstractArtefact
   * @generated
   */
  public Adapter createAbstractArtefactAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.Collection <em>Collection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.Collection
   * @generated
   */
  public Adapter createCollectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.Configuration <em>Configuration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.Configuration
   * @generated
   */
  public Adapter createConfigurationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.MVC <em>MVC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.MVC
   * @generated
   */
  public Adapter createMVCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.Alias <em>Alias</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.Alias
   * @generated
   */
  public Adapter createAliasAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.Context <em>Context</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.Context
   * @generated
   */
  public Adapter createContextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.AnnotationConfig <em>Annotation Config</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.AnnotationConfig
   * @generated
   */
  public Adapter createAnnotationConfigAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.ComponentScan <em>Component Scan</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.ComponentScan
   * @generated
   */
  public Adapter createComponentScanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.IncludeFilter <em>Include Filter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.IncludeFilter
   * @generated
   */
  public Adapter createIncludeFilterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.ExcludeFilter <em>Exclude Filter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.ExcludeFilter
   * @generated
   */
  public Adapter createExcludeFilterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.LoadTimeWeaver <em>Load Time Weaver</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.LoadTimeWeaver
   * @generated
   */
  public Adapter createLoadTimeWeaverAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.MbeanExport <em>Mbean Export</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.MbeanExport
   * @generated
   */
  public Adapter createMbeanExportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.MbeanServer <em>Mbean Server</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.MbeanServer
   * @generated
   */
  public Adapter createMbeanServerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.PropertyHolder <em>Property Holder</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.PropertyHolder
   * @generated
   */
  public Adapter createPropertyHolderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.PropertyPlaceholder <em>Property Placeholder</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.PropertyPlaceholder
   * @generated
   */
  public Adapter createPropertyPlaceholderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.PropertyOverride <em>Property Override</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.PropertyOverride
   * @generated
   */
  public Adapter createPropertyOverrideAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.SpringConfigured <em>Spring Configured</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.SpringConfigured
   * @generated
   */
  public Adapter createSpringConfiguredAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.Aspect <em>Aspect</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.Aspect
   * @generated
   */
  public Adapter createAspectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.AopAspectJAutoproxy <em>Aop Aspect JAutoproxy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.AopAspectJAutoproxy
   * @generated
   */
  public Adapter createAopAspectJAutoproxyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.AopInclude <em>Aop Include</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.AopInclude
   * @generated
   */
  public Adapter createAopIncludeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.AopConfig <em>Aop Config</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.AopConfig
   * @generated
   */
  public Adapter createAopConfigAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.AopPointcut <em>Aop Pointcut</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.AopPointcut
   * @generated
   */
  public Adapter createAopPointcutAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.AopAdvisor <em>Aop Advisor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.AopAdvisor
   * @generated
   */
  public Adapter createAopAdvisorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.AopAspect <em>Aop Aspect</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.AopAspect
   * @generated
   */
  public Adapter createAopAspectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.DeclareParents <em>Declare Parents</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.DeclareParents
   * @generated
   */
  public Adapter createDeclareParentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.Interface <em>Interface</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.Interface
   * @generated
   */
  public Adapter createInterfaceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.AopDefaultImplInterface <em>Aop Default Impl Interface</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.AopDefaultImplInterface
   * @generated
   */
  public Adapter createAopDefaultImplInterfaceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.AopDelegateImplRef <em>Aop Delegate Impl Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.AopDelegateImplRef
   * @generated
   */
  public Adapter createAopDelegateImplRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.Advise <em>Advise</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.Advise
   * @generated
   */
  public Adapter createAdviseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.BeforeAdvise <em>Before Advise</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.BeforeAdvise
   * @generated
   */
  public Adapter createBeforeAdviseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.AfterAdvise <em>After Advise</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.AfterAdvise
   * @generated
   */
  public Adapter createAfterAdviseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.AroundAdvise <em>Around Advise</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.AroundAdvise
   * @generated
   */
  public Adapter createAroundAdviseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.AfterReturning <em>After Returning</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.AfterReturning
   * @generated
   */
  public Adapter createAfterReturningAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.AfterThowing <em>After Thowing</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.AfterThowing
   * @generated
   */
  public Adapter createAfterThowingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.TxAdvise <em>Tx Advise</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.TxAdvise
   * @generated
   */
  public Adapter createTxAdviseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.TxAttribute <em>Tx Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.TxAttribute
   * @generated
   */
  public Adapter createTxAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.TxMethod <em>Tx Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.TxMethod
   * @generated
   */
  public Adapter createTxMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.TxJtaTransactionManager <em>Tx Jta Transaction Manager</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.TxJtaTransactionManager
   * @generated
   */
  public Adapter createTxJtaTransactionManagerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.Component <em>Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.Component
   * @generated
   */
  public Adapter createComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.CreationMethod <em>Creation Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.CreationMethod
   * @generated
   */
  public Adapter createCreationMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.ClassOrFactory <em>Class Or Factory</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.ClassOrFactory
   * @generated
   */
  public Adapter createClassOrFactoryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.Factory <em>Factory</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.Factory
   * @generated
   */
  public Adapter createFactoryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.Class <em>Class</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.Class
   * @generated
   */
  public Adapter createClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.AopScopedProxy <em>Aop Scoped Proxy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.AopScopedProxy
   * @generated
   */
  public Adapter createAopScopedProxyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.Feature <em>Feature</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.Feature
   * @generated
   */
  public Adapter createFeatureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.Attribute <em>Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.Attribute
   * @generated
   */
  public Adapter createAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.Reference <em>Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.Reference
   * @generated
   */
  public Adapter createReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.LookupMethod <em>Lookup Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.LookupMethod
   * @generated
   */
  public Adapter createLookupMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.Qualifier <em>Qualifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.Qualifier
   * @generated
   */
  public Adapter createQualifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.Meta <em>Meta</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.Meta
   * @generated
   */
  public Adapter createMetaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.QualifierAttribute <em>Qualifier Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.QualifierAttribute
   * @generated
   */
  public Adapter createQualifierAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.Array <em>Array</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.Array
   * @generated
   */
  public Adapter createArrayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.sList <em>sList</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.sList
   * @generated
   */
  public Adapter createsListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.sSet <em>sSet</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.sSet
   * @generated
   */
  public Adapter createsSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.Props <em>Props</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.Props
   * @generated
   */
  public Adapter createPropsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.Prop <em>Prop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.Prop
   * @generated
   */
  public Adapter createPropAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.Map <em>Map</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.Map
   * @generated
   */
  public Adapter createMapAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.MapEntry <em>Map Entry</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.MapEntry
   * @generated
   */
  public Adapter createMapEntryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.Key <em>Key</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.Key
   * @generated
   */
  public Adapter createKeyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.UtilConstant <em>Util Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.UtilConstant
   * @generated
   */
  public Adapter createUtilConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.UtilPropertyPath <em>Util Property Path</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.UtilPropertyPath
   * @generated
   */
  public Adapter createUtilPropertyPathAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.UtilProperties <em>Util Properties</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.UtilProperties
   * @generated
   */
  public Adapter createUtilPropertiesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.UtilList <em>Util List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.UtilList
   * @generated
   */
  public Adapter createUtilListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.UtilMap <em>Util Map</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.UtilMap
   * @generated
   */
  public Adapter createUtilMapAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.UtilSet <em>Util Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.UtilSet
   * @generated
   */
  public Adapter createUtilSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.PropertyFile <em>Property File</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.PropertyFile
   * @generated
   */
  public Adapter createPropertyFileAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.ales.springdsl.springDSL.DataString <em>Data String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.ales.springdsl.springDSL.DataString
   * @generated
   */
  public Adapter createDataStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //SpringDSLAdapterFactory

/**
 * generated by Xtext 2.18.0
 */
package fr.imt.ales.springdsl.springDSL.impl;

import fr.imt.ales.springdsl.springDSL.Alias;
import fr.imt.ales.springdsl.springDSL.Aspect;
import fr.imt.ales.springdsl.springDSL.AutoWiredType;
import fr.imt.ales.springdsl.springDSL.Component;
import fr.imt.ales.springdsl.springDSL.Configuration;
import fr.imt.ales.springdsl.springDSL.Context;
import fr.imt.ales.springdsl.springDSL.DefaultableBoolean;
import fr.imt.ales.springdsl.springDSL.Import;
import fr.imt.ales.springdsl.springDSL.MVC;
import fr.imt.ales.springdsl.springDSL.SpringDSLPackage;
import fr.imt.ales.springdsl.springDSL.TxAdvise;
import fr.imt.ales.springdsl.springDSL.TxJtaTransactionManager;
import fr.imt.ales.springdsl.springDSL.UtilConstant;
import fr.imt.ales.springdsl.springDSL.UtilList;
import fr.imt.ales.springdsl.springDSL.UtilMap;
import fr.imt.ales.springdsl.springDSL.UtilProperties;
import fr.imt.ales.springdsl.springDSL.UtilPropertyPath;
import fr.imt.ales.springdsl.springDSL.UtilSet;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Configuration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.ConfigurationImpl#getDefaultAutowire <em>Default Autowire</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.ConfigurationImpl#getDefaultInitMethod <em>Default Init Method</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.ConfigurationImpl#getDefaultAutowireCandidates <em>Default Autowire Candidates</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.ConfigurationImpl#getDefaultDestroyMethod <em>Default Destroy Method</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.ConfigurationImpl#getDefaultLazyInit <em>Default Lazy Init</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.ConfigurationImpl#getDefaultMerge <em>Default Merge</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.ConfigurationImpl#getProfile <em>Profile</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.ConfigurationImpl#getDescription <em>Description</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.ConfigurationImpl#getComponents <em>Components</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.ConfigurationImpl#getAlias <em>Alias</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.ConfigurationImpl#getImports <em>Imports</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.ConfigurationImpl#getContexts <em>Contexts</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.ConfigurationImpl#getMvcs <em>Mvcs</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.ConfigurationImpl#getAspects <em>Aspects</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.ConfigurationImpl#getUtilConstants <em>Util Constants</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.ConfigurationImpl#getUtilLists <em>Util Lists</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.ConfigurationImpl#getUtilMaps <em>Util Maps</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.ConfigurationImpl#getUtilProperties <em>Util Properties</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.ConfigurationImpl#getUtilSets <em>Util Sets</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.ConfigurationImpl#getUtilPropertiesPath <em>Util Properties Path</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.ConfigurationImpl#getTxAdvices <em>Tx Advices</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.ConfigurationImpl#getTxJtaTransactionManager <em>Tx Jta Transaction Manager</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.ConfigurationImpl#getConfigurationComposite <em>Configuration Composite</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConfigurationImpl extends MinimalEObjectImpl.Container implements Configuration
{
  /**
   * The default value of the '{@link #getDefaultAutowire() <em>Default Autowire</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultAutowire()
   * @generated
   * @ordered
   */
  protected static final AutoWiredType DEFAULT_AUTOWIRE_EDEFAULT = AutoWiredType.DEFAULT;

  /**
   * The cached value of the '{@link #getDefaultAutowire() <em>Default Autowire</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultAutowire()
   * @generated
   * @ordered
   */
  protected AutoWiredType defaultAutowire = DEFAULT_AUTOWIRE_EDEFAULT;

  /**
   * The default value of the '{@link #getDefaultInitMethod() <em>Default Init Method</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultInitMethod()
   * @generated
   * @ordered
   */
  protected static final String DEFAULT_INIT_METHOD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDefaultInitMethod() <em>Default Init Method</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultInitMethod()
   * @generated
   * @ordered
   */
  protected String defaultInitMethod = DEFAULT_INIT_METHOD_EDEFAULT;

  /**
   * The default value of the '{@link #getDefaultAutowireCandidates() <em>Default Autowire Candidates</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultAutowireCandidates()
   * @generated
   * @ordered
   */
  protected static final String DEFAULT_AUTOWIRE_CANDIDATES_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDefaultAutowireCandidates() <em>Default Autowire Candidates</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultAutowireCandidates()
   * @generated
   * @ordered
   */
  protected String defaultAutowireCandidates = DEFAULT_AUTOWIRE_CANDIDATES_EDEFAULT;

  /**
   * The default value of the '{@link #getDefaultDestroyMethod() <em>Default Destroy Method</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultDestroyMethod()
   * @generated
   * @ordered
   */
  protected static final String DEFAULT_DESTROY_METHOD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDefaultDestroyMethod() <em>Default Destroy Method</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultDestroyMethod()
   * @generated
   * @ordered
   */
  protected String defaultDestroyMethod = DEFAULT_DESTROY_METHOD_EDEFAULT;

  /**
   * The default value of the '{@link #getDefaultLazyInit() <em>Default Lazy Init</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultLazyInit()
   * @generated
   * @ordered
   */
  protected static final DefaultableBoolean DEFAULT_LAZY_INIT_EDEFAULT = DefaultableBoolean.DEFAULT;

  /**
   * The cached value of the '{@link #getDefaultLazyInit() <em>Default Lazy Init</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultLazyInit()
   * @generated
   * @ordered
   */
  protected DefaultableBoolean defaultLazyInit = DEFAULT_LAZY_INIT_EDEFAULT;

  /**
   * The default value of the '{@link #getDefaultMerge() <em>Default Merge</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultMerge()
   * @generated
   * @ordered
   */
  protected static final DefaultableBoolean DEFAULT_MERGE_EDEFAULT = DefaultableBoolean.DEFAULT;

  /**
   * The cached value of the '{@link #getDefaultMerge() <em>Default Merge</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultMerge()
   * @generated
   * @ordered
   */
  protected DefaultableBoolean defaultMerge = DEFAULT_MERGE_EDEFAULT;

  /**
   * The default value of the '{@link #getProfile() <em>Profile</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProfile()
   * @generated
   * @ordered
   */
  protected static final String PROFILE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getProfile() <em>Profile</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProfile()
   * @generated
   * @ordered
   */
  protected String profile = PROFILE_EDEFAULT;

  /**
   * The default value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected static final String DESCRIPTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected String description = DESCRIPTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getComponents() <em>Components</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponents()
   * @generated
   * @ordered
   */
  protected EList<Component> components;

  /**
   * The cached value of the '{@link #getAlias() <em>Alias</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlias()
   * @generated
   * @ordered
   */
  protected EList<Alias> alias;

  /**
   * The cached value of the '{@link #getImports() <em>Imports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImports()
   * @generated
   * @ordered
   */
  protected EList<Import> imports;

  /**
   * The cached value of the '{@link #getContexts() <em>Contexts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContexts()
   * @generated
   * @ordered
   */
  protected EList<Context> contexts;

  /**
   * The cached value of the '{@link #getMvcs() <em>Mvcs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMvcs()
   * @generated
   * @ordered
   */
  protected EList<MVC> mvcs;

  /**
   * The cached value of the '{@link #getAspects() <em>Aspects</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAspects()
   * @generated
   * @ordered
   */
  protected EList<Aspect> aspects;

  /**
   * The cached value of the '{@link #getUtilConstants() <em>Util Constants</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUtilConstants()
   * @generated
   * @ordered
   */
  protected EList<UtilConstant> utilConstants;

  /**
   * The cached value of the '{@link #getUtilLists() <em>Util Lists</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUtilLists()
   * @generated
   * @ordered
   */
  protected EList<UtilList> utilLists;

  /**
   * The cached value of the '{@link #getUtilMaps() <em>Util Maps</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUtilMaps()
   * @generated
   * @ordered
   */
  protected EList<UtilMap> utilMaps;

  /**
   * The cached value of the '{@link #getUtilProperties() <em>Util Properties</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUtilProperties()
   * @generated
   * @ordered
   */
  protected EList<UtilProperties> utilProperties;

  /**
   * The cached value of the '{@link #getUtilSets() <em>Util Sets</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUtilSets()
   * @generated
   * @ordered
   */
  protected EList<UtilSet> utilSets;

  /**
   * The cached value of the '{@link #getUtilPropertiesPath() <em>Util Properties Path</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUtilPropertiesPath()
   * @generated
   * @ordered
   */
  protected EList<UtilPropertyPath> utilPropertiesPath;

  /**
   * The cached value of the '{@link #getTxAdvices() <em>Tx Advices</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTxAdvices()
   * @generated
   * @ordered
   */
  protected EList<TxAdvise> txAdvices;

  /**
   * The cached value of the '{@link #getTxJtaTransactionManager() <em>Tx Jta Transaction Manager</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTxJtaTransactionManager()
   * @generated
   * @ordered
   */
  protected EList<TxJtaTransactionManager> txJtaTransactionManager;

  /**
   * The cached value of the '{@link #getConfigurationComposite() <em>Configuration Composite</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConfigurationComposite()
   * @generated
   * @ordered
   */
  protected EList<Configuration> configurationComposite;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConfigurationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SpringDSLPackage.Literals.CONFIGURATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AutoWiredType getDefaultAutowire()
  {
    return defaultAutowire;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDefaultAutowire(AutoWiredType newDefaultAutowire)
  {
    AutoWiredType oldDefaultAutowire = defaultAutowire;
    defaultAutowire = newDefaultAutowire == null ? DEFAULT_AUTOWIRE_EDEFAULT : newDefaultAutowire;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringDSLPackage.CONFIGURATION__DEFAULT_AUTOWIRE, oldDefaultAutowire, defaultAutowire));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDefaultInitMethod()
  {
    return defaultInitMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDefaultInitMethod(String newDefaultInitMethod)
  {
    String oldDefaultInitMethod = defaultInitMethod;
    defaultInitMethod = newDefaultInitMethod;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringDSLPackage.CONFIGURATION__DEFAULT_INIT_METHOD, oldDefaultInitMethod, defaultInitMethod));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDefaultAutowireCandidates()
  {
    return defaultAutowireCandidates;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDefaultAutowireCandidates(String newDefaultAutowireCandidates)
  {
    String oldDefaultAutowireCandidates = defaultAutowireCandidates;
    defaultAutowireCandidates = newDefaultAutowireCandidates;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringDSLPackage.CONFIGURATION__DEFAULT_AUTOWIRE_CANDIDATES, oldDefaultAutowireCandidates, defaultAutowireCandidates));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDefaultDestroyMethod()
  {
    return defaultDestroyMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDefaultDestroyMethod(String newDefaultDestroyMethod)
  {
    String oldDefaultDestroyMethod = defaultDestroyMethod;
    defaultDestroyMethod = newDefaultDestroyMethod;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringDSLPackage.CONFIGURATION__DEFAULT_DESTROY_METHOD, oldDefaultDestroyMethod, defaultDestroyMethod));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DefaultableBoolean getDefaultLazyInit()
  {
    return defaultLazyInit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDefaultLazyInit(DefaultableBoolean newDefaultLazyInit)
  {
    DefaultableBoolean oldDefaultLazyInit = defaultLazyInit;
    defaultLazyInit = newDefaultLazyInit == null ? DEFAULT_LAZY_INIT_EDEFAULT : newDefaultLazyInit;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringDSLPackage.CONFIGURATION__DEFAULT_LAZY_INIT, oldDefaultLazyInit, defaultLazyInit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DefaultableBoolean getDefaultMerge()
  {
    return defaultMerge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDefaultMerge(DefaultableBoolean newDefaultMerge)
  {
    DefaultableBoolean oldDefaultMerge = defaultMerge;
    defaultMerge = newDefaultMerge == null ? DEFAULT_MERGE_EDEFAULT : newDefaultMerge;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringDSLPackage.CONFIGURATION__DEFAULT_MERGE, oldDefaultMerge, defaultMerge));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getProfile()
  {
    return profile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProfile(String newProfile)
  {
    String oldProfile = profile;
    profile = newProfile;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringDSLPackage.CONFIGURATION__PROFILE, oldProfile, profile));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDescription()
  {
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDescription(String newDescription)
  {
    String oldDescription = description;
    description = newDescription;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringDSLPackage.CONFIGURATION__DESCRIPTION, oldDescription, description));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Component> getComponents()
  {
    if (components == null)
    {
      components = new EObjectContainmentEList<Component>(Component.class, this, SpringDSLPackage.CONFIGURATION__COMPONENTS);
    }
    return components;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Alias> getAlias()
  {
    if (alias == null)
    {
      alias = new EObjectContainmentEList<Alias>(Alias.class, this, SpringDSLPackage.CONFIGURATION__ALIAS);
    }
    return alias;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Import> getImports()
  {
    if (imports == null)
    {
      imports = new EObjectContainmentEList<Import>(Import.class, this, SpringDSLPackage.CONFIGURATION__IMPORTS);
    }
    return imports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Context> getContexts()
  {
    if (contexts == null)
    {
      contexts = new EObjectContainmentEList<Context>(Context.class, this, SpringDSLPackage.CONFIGURATION__CONTEXTS);
    }
    return contexts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<MVC> getMvcs()
  {
    if (mvcs == null)
    {
      mvcs = new EObjectContainmentEList<MVC>(MVC.class, this, SpringDSLPackage.CONFIGURATION__MVCS);
    }
    return mvcs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Aspect> getAspects()
  {
    if (aspects == null)
    {
      aspects = new EObjectContainmentEList<Aspect>(Aspect.class, this, SpringDSLPackage.CONFIGURATION__ASPECTS);
    }
    return aspects;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<UtilConstant> getUtilConstants()
  {
    if (utilConstants == null)
    {
      utilConstants = new EObjectContainmentEList<UtilConstant>(UtilConstant.class, this, SpringDSLPackage.CONFIGURATION__UTIL_CONSTANTS);
    }
    return utilConstants;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<UtilList> getUtilLists()
  {
    if (utilLists == null)
    {
      utilLists = new EObjectContainmentEList<UtilList>(UtilList.class, this, SpringDSLPackage.CONFIGURATION__UTIL_LISTS);
    }
    return utilLists;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<UtilMap> getUtilMaps()
  {
    if (utilMaps == null)
    {
      utilMaps = new EObjectContainmentEList<UtilMap>(UtilMap.class, this, SpringDSLPackage.CONFIGURATION__UTIL_MAPS);
    }
    return utilMaps;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<UtilProperties> getUtilProperties()
  {
    if (utilProperties == null)
    {
      utilProperties = new EObjectContainmentEList<UtilProperties>(UtilProperties.class, this, SpringDSLPackage.CONFIGURATION__UTIL_PROPERTIES);
    }
    return utilProperties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<UtilSet> getUtilSets()
  {
    if (utilSets == null)
    {
      utilSets = new EObjectContainmentEList<UtilSet>(UtilSet.class, this, SpringDSLPackage.CONFIGURATION__UTIL_SETS);
    }
    return utilSets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<UtilPropertyPath> getUtilPropertiesPath()
  {
    if (utilPropertiesPath == null)
    {
      utilPropertiesPath = new EObjectContainmentEList<UtilPropertyPath>(UtilPropertyPath.class, this, SpringDSLPackage.CONFIGURATION__UTIL_PROPERTIES_PATH);
    }
    return utilPropertiesPath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TxAdvise> getTxAdvices()
  {
    if (txAdvices == null)
    {
      txAdvices = new EObjectContainmentEList<TxAdvise>(TxAdvise.class, this, SpringDSLPackage.CONFIGURATION__TX_ADVICES);
    }
    return txAdvices;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TxJtaTransactionManager> getTxJtaTransactionManager()
  {
    if (txJtaTransactionManager == null)
    {
      txJtaTransactionManager = new EObjectContainmentEList<TxJtaTransactionManager>(TxJtaTransactionManager.class, this, SpringDSLPackage.CONFIGURATION__TX_JTA_TRANSACTION_MANAGER);
    }
    return txJtaTransactionManager;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Configuration> getConfigurationComposite()
  {
    if (configurationComposite == null)
    {
      configurationComposite = new EObjectContainmentEList<Configuration>(Configuration.class, this, SpringDSLPackage.CONFIGURATION__CONFIGURATION_COMPOSITE);
    }
    return configurationComposite;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SpringDSLPackage.CONFIGURATION__COMPONENTS:
        return ((InternalEList<?>)getComponents()).basicRemove(otherEnd, msgs);
      case SpringDSLPackage.CONFIGURATION__ALIAS:
        return ((InternalEList<?>)getAlias()).basicRemove(otherEnd, msgs);
      case SpringDSLPackage.CONFIGURATION__IMPORTS:
        return ((InternalEList<?>)getImports()).basicRemove(otherEnd, msgs);
      case SpringDSLPackage.CONFIGURATION__CONTEXTS:
        return ((InternalEList<?>)getContexts()).basicRemove(otherEnd, msgs);
      case SpringDSLPackage.CONFIGURATION__MVCS:
        return ((InternalEList<?>)getMvcs()).basicRemove(otherEnd, msgs);
      case SpringDSLPackage.CONFIGURATION__ASPECTS:
        return ((InternalEList<?>)getAspects()).basicRemove(otherEnd, msgs);
      case SpringDSLPackage.CONFIGURATION__UTIL_CONSTANTS:
        return ((InternalEList<?>)getUtilConstants()).basicRemove(otherEnd, msgs);
      case SpringDSLPackage.CONFIGURATION__UTIL_LISTS:
        return ((InternalEList<?>)getUtilLists()).basicRemove(otherEnd, msgs);
      case SpringDSLPackage.CONFIGURATION__UTIL_MAPS:
        return ((InternalEList<?>)getUtilMaps()).basicRemove(otherEnd, msgs);
      case SpringDSLPackage.CONFIGURATION__UTIL_PROPERTIES:
        return ((InternalEList<?>)getUtilProperties()).basicRemove(otherEnd, msgs);
      case SpringDSLPackage.CONFIGURATION__UTIL_SETS:
        return ((InternalEList<?>)getUtilSets()).basicRemove(otherEnd, msgs);
      case SpringDSLPackage.CONFIGURATION__UTIL_PROPERTIES_PATH:
        return ((InternalEList<?>)getUtilPropertiesPath()).basicRemove(otherEnd, msgs);
      case SpringDSLPackage.CONFIGURATION__TX_ADVICES:
        return ((InternalEList<?>)getTxAdvices()).basicRemove(otherEnd, msgs);
      case SpringDSLPackage.CONFIGURATION__TX_JTA_TRANSACTION_MANAGER:
        return ((InternalEList<?>)getTxJtaTransactionManager()).basicRemove(otherEnd, msgs);
      case SpringDSLPackage.CONFIGURATION__CONFIGURATION_COMPOSITE:
        return ((InternalEList<?>)getConfigurationComposite()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SpringDSLPackage.CONFIGURATION__DEFAULT_AUTOWIRE:
        return getDefaultAutowire();
      case SpringDSLPackage.CONFIGURATION__DEFAULT_INIT_METHOD:
        return getDefaultInitMethod();
      case SpringDSLPackage.CONFIGURATION__DEFAULT_AUTOWIRE_CANDIDATES:
        return getDefaultAutowireCandidates();
      case SpringDSLPackage.CONFIGURATION__DEFAULT_DESTROY_METHOD:
        return getDefaultDestroyMethod();
      case SpringDSLPackage.CONFIGURATION__DEFAULT_LAZY_INIT:
        return getDefaultLazyInit();
      case SpringDSLPackage.CONFIGURATION__DEFAULT_MERGE:
        return getDefaultMerge();
      case SpringDSLPackage.CONFIGURATION__PROFILE:
        return getProfile();
      case SpringDSLPackage.CONFIGURATION__DESCRIPTION:
        return getDescription();
      case SpringDSLPackage.CONFIGURATION__COMPONENTS:
        return getComponents();
      case SpringDSLPackage.CONFIGURATION__ALIAS:
        return getAlias();
      case SpringDSLPackage.CONFIGURATION__IMPORTS:
        return getImports();
      case SpringDSLPackage.CONFIGURATION__CONTEXTS:
        return getContexts();
      case SpringDSLPackage.CONFIGURATION__MVCS:
        return getMvcs();
      case SpringDSLPackage.CONFIGURATION__ASPECTS:
        return getAspects();
      case SpringDSLPackage.CONFIGURATION__UTIL_CONSTANTS:
        return getUtilConstants();
      case SpringDSLPackage.CONFIGURATION__UTIL_LISTS:
        return getUtilLists();
      case SpringDSLPackage.CONFIGURATION__UTIL_MAPS:
        return getUtilMaps();
      case SpringDSLPackage.CONFIGURATION__UTIL_PROPERTIES:
        return getUtilProperties();
      case SpringDSLPackage.CONFIGURATION__UTIL_SETS:
        return getUtilSets();
      case SpringDSLPackage.CONFIGURATION__UTIL_PROPERTIES_PATH:
        return getUtilPropertiesPath();
      case SpringDSLPackage.CONFIGURATION__TX_ADVICES:
        return getTxAdvices();
      case SpringDSLPackage.CONFIGURATION__TX_JTA_TRANSACTION_MANAGER:
        return getTxJtaTransactionManager();
      case SpringDSLPackage.CONFIGURATION__CONFIGURATION_COMPOSITE:
        return getConfigurationComposite();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SpringDSLPackage.CONFIGURATION__DEFAULT_AUTOWIRE:
        setDefaultAutowire((AutoWiredType)newValue);
        return;
      case SpringDSLPackage.CONFIGURATION__DEFAULT_INIT_METHOD:
        setDefaultInitMethod((String)newValue);
        return;
      case SpringDSLPackage.CONFIGURATION__DEFAULT_AUTOWIRE_CANDIDATES:
        setDefaultAutowireCandidates((String)newValue);
        return;
      case SpringDSLPackage.CONFIGURATION__DEFAULT_DESTROY_METHOD:
        setDefaultDestroyMethod((String)newValue);
        return;
      case SpringDSLPackage.CONFIGURATION__DEFAULT_LAZY_INIT:
        setDefaultLazyInit((DefaultableBoolean)newValue);
        return;
      case SpringDSLPackage.CONFIGURATION__DEFAULT_MERGE:
        setDefaultMerge((DefaultableBoolean)newValue);
        return;
      case SpringDSLPackage.CONFIGURATION__PROFILE:
        setProfile((String)newValue);
        return;
      case SpringDSLPackage.CONFIGURATION__DESCRIPTION:
        setDescription((String)newValue);
        return;
      case SpringDSLPackage.CONFIGURATION__COMPONENTS:
        getComponents().clear();
        getComponents().addAll((Collection<? extends Component>)newValue);
        return;
      case SpringDSLPackage.CONFIGURATION__ALIAS:
        getAlias().clear();
        getAlias().addAll((Collection<? extends Alias>)newValue);
        return;
      case SpringDSLPackage.CONFIGURATION__IMPORTS:
        getImports().clear();
        getImports().addAll((Collection<? extends Import>)newValue);
        return;
      case SpringDSLPackage.CONFIGURATION__CONTEXTS:
        getContexts().clear();
        getContexts().addAll((Collection<? extends Context>)newValue);
        return;
      case SpringDSLPackage.CONFIGURATION__MVCS:
        getMvcs().clear();
        getMvcs().addAll((Collection<? extends MVC>)newValue);
        return;
      case SpringDSLPackage.CONFIGURATION__ASPECTS:
        getAspects().clear();
        getAspects().addAll((Collection<? extends Aspect>)newValue);
        return;
      case SpringDSLPackage.CONFIGURATION__UTIL_CONSTANTS:
        getUtilConstants().clear();
        getUtilConstants().addAll((Collection<? extends UtilConstant>)newValue);
        return;
      case SpringDSLPackage.CONFIGURATION__UTIL_LISTS:
        getUtilLists().clear();
        getUtilLists().addAll((Collection<? extends UtilList>)newValue);
        return;
      case SpringDSLPackage.CONFIGURATION__UTIL_MAPS:
        getUtilMaps().clear();
        getUtilMaps().addAll((Collection<? extends UtilMap>)newValue);
        return;
      case SpringDSLPackage.CONFIGURATION__UTIL_PROPERTIES:
        getUtilProperties().clear();
        getUtilProperties().addAll((Collection<? extends UtilProperties>)newValue);
        return;
      case SpringDSLPackage.CONFIGURATION__UTIL_SETS:
        getUtilSets().clear();
        getUtilSets().addAll((Collection<? extends UtilSet>)newValue);
        return;
      case SpringDSLPackage.CONFIGURATION__UTIL_PROPERTIES_PATH:
        getUtilPropertiesPath().clear();
        getUtilPropertiesPath().addAll((Collection<? extends UtilPropertyPath>)newValue);
        return;
      case SpringDSLPackage.CONFIGURATION__TX_ADVICES:
        getTxAdvices().clear();
        getTxAdvices().addAll((Collection<? extends TxAdvise>)newValue);
        return;
      case SpringDSLPackage.CONFIGURATION__TX_JTA_TRANSACTION_MANAGER:
        getTxJtaTransactionManager().clear();
        getTxJtaTransactionManager().addAll((Collection<? extends TxJtaTransactionManager>)newValue);
        return;
      case SpringDSLPackage.CONFIGURATION__CONFIGURATION_COMPOSITE:
        getConfigurationComposite().clear();
        getConfigurationComposite().addAll((Collection<? extends Configuration>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SpringDSLPackage.CONFIGURATION__DEFAULT_AUTOWIRE:
        setDefaultAutowire(DEFAULT_AUTOWIRE_EDEFAULT);
        return;
      case SpringDSLPackage.CONFIGURATION__DEFAULT_INIT_METHOD:
        setDefaultInitMethod(DEFAULT_INIT_METHOD_EDEFAULT);
        return;
      case SpringDSLPackage.CONFIGURATION__DEFAULT_AUTOWIRE_CANDIDATES:
        setDefaultAutowireCandidates(DEFAULT_AUTOWIRE_CANDIDATES_EDEFAULT);
        return;
      case SpringDSLPackage.CONFIGURATION__DEFAULT_DESTROY_METHOD:
        setDefaultDestroyMethod(DEFAULT_DESTROY_METHOD_EDEFAULT);
        return;
      case SpringDSLPackage.CONFIGURATION__DEFAULT_LAZY_INIT:
        setDefaultLazyInit(DEFAULT_LAZY_INIT_EDEFAULT);
        return;
      case SpringDSLPackage.CONFIGURATION__DEFAULT_MERGE:
        setDefaultMerge(DEFAULT_MERGE_EDEFAULT);
        return;
      case SpringDSLPackage.CONFIGURATION__PROFILE:
        setProfile(PROFILE_EDEFAULT);
        return;
      case SpringDSLPackage.CONFIGURATION__DESCRIPTION:
        setDescription(DESCRIPTION_EDEFAULT);
        return;
      case SpringDSLPackage.CONFIGURATION__COMPONENTS:
        getComponents().clear();
        return;
      case SpringDSLPackage.CONFIGURATION__ALIAS:
        getAlias().clear();
        return;
      case SpringDSLPackage.CONFIGURATION__IMPORTS:
        getImports().clear();
        return;
      case SpringDSLPackage.CONFIGURATION__CONTEXTS:
        getContexts().clear();
        return;
      case SpringDSLPackage.CONFIGURATION__MVCS:
        getMvcs().clear();
        return;
      case SpringDSLPackage.CONFIGURATION__ASPECTS:
        getAspects().clear();
        return;
      case SpringDSLPackage.CONFIGURATION__UTIL_CONSTANTS:
        getUtilConstants().clear();
        return;
      case SpringDSLPackage.CONFIGURATION__UTIL_LISTS:
        getUtilLists().clear();
        return;
      case SpringDSLPackage.CONFIGURATION__UTIL_MAPS:
        getUtilMaps().clear();
        return;
      case SpringDSLPackage.CONFIGURATION__UTIL_PROPERTIES:
        getUtilProperties().clear();
        return;
      case SpringDSLPackage.CONFIGURATION__UTIL_SETS:
        getUtilSets().clear();
        return;
      case SpringDSLPackage.CONFIGURATION__UTIL_PROPERTIES_PATH:
        getUtilPropertiesPath().clear();
        return;
      case SpringDSLPackage.CONFIGURATION__TX_ADVICES:
        getTxAdvices().clear();
        return;
      case SpringDSLPackage.CONFIGURATION__TX_JTA_TRANSACTION_MANAGER:
        getTxJtaTransactionManager().clear();
        return;
      case SpringDSLPackage.CONFIGURATION__CONFIGURATION_COMPOSITE:
        getConfigurationComposite().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SpringDSLPackage.CONFIGURATION__DEFAULT_AUTOWIRE:
        return defaultAutowire != DEFAULT_AUTOWIRE_EDEFAULT;
      case SpringDSLPackage.CONFIGURATION__DEFAULT_INIT_METHOD:
        return DEFAULT_INIT_METHOD_EDEFAULT == null ? defaultInitMethod != null : !DEFAULT_INIT_METHOD_EDEFAULT.equals(defaultInitMethod);
      case SpringDSLPackage.CONFIGURATION__DEFAULT_AUTOWIRE_CANDIDATES:
        return DEFAULT_AUTOWIRE_CANDIDATES_EDEFAULT == null ? defaultAutowireCandidates != null : !DEFAULT_AUTOWIRE_CANDIDATES_EDEFAULT.equals(defaultAutowireCandidates);
      case SpringDSLPackage.CONFIGURATION__DEFAULT_DESTROY_METHOD:
        return DEFAULT_DESTROY_METHOD_EDEFAULT == null ? defaultDestroyMethod != null : !DEFAULT_DESTROY_METHOD_EDEFAULT.equals(defaultDestroyMethod);
      case SpringDSLPackage.CONFIGURATION__DEFAULT_LAZY_INIT:
        return defaultLazyInit != DEFAULT_LAZY_INIT_EDEFAULT;
      case SpringDSLPackage.CONFIGURATION__DEFAULT_MERGE:
        return defaultMerge != DEFAULT_MERGE_EDEFAULT;
      case SpringDSLPackage.CONFIGURATION__PROFILE:
        return PROFILE_EDEFAULT == null ? profile != null : !PROFILE_EDEFAULT.equals(profile);
      case SpringDSLPackage.CONFIGURATION__DESCRIPTION:
        return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
      case SpringDSLPackage.CONFIGURATION__COMPONENTS:
        return components != null && !components.isEmpty();
      case SpringDSLPackage.CONFIGURATION__ALIAS:
        return alias != null && !alias.isEmpty();
      case SpringDSLPackage.CONFIGURATION__IMPORTS:
        return imports != null && !imports.isEmpty();
      case SpringDSLPackage.CONFIGURATION__CONTEXTS:
        return contexts != null && !contexts.isEmpty();
      case SpringDSLPackage.CONFIGURATION__MVCS:
        return mvcs != null && !mvcs.isEmpty();
      case SpringDSLPackage.CONFIGURATION__ASPECTS:
        return aspects != null && !aspects.isEmpty();
      case SpringDSLPackage.CONFIGURATION__UTIL_CONSTANTS:
        return utilConstants != null && !utilConstants.isEmpty();
      case SpringDSLPackage.CONFIGURATION__UTIL_LISTS:
        return utilLists != null && !utilLists.isEmpty();
      case SpringDSLPackage.CONFIGURATION__UTIL_MAPS:
        return utilMaps != null && !utilMaps.isEmpty();
      case SpringDSLPackage.CONFIGURATION__UTIL_PROPERTIES:
        return utilProperties != null && !utilProperties.isEmpty();
      case SpringDSLPackage.CONFIGURATION__UTIL_SETS:
        return utilSets != null && !utilSets.isEmpty();
      case SpringDSLPackage.CONFIGURATION__UTIL_PROPERTIES_PATH:
        return utilPropertiesPath != null && !utilPropertiesPath.isEmpty();
      case SpringDSLPackage.CONFIGURATION__TX_ADVICES:
        return txAdvices != null && !txAdvices.isEmpty();
      case SpringDSLPackage.CONFIGURATION__TX_JTA_TRANSACTION_MANAGER:
        return txJtaTransactionManager != null && !txJtaTransactionManager.isEmpty();
      case SpringDSLPackage.CONFIGURATION__CONFIGURATION_COMPOSITE:
        return configurationComposite != null && !configurationComposite.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (defaultAutowire: ");
    result.append(defaultAutowire);
    result.append(", defaultInitMethod: ");
    result.append(defaultInitMethod);
    result.append(", defaultAutowireCandidates: ");
    result.append(defaultAutowireCandidates);
    result.append(", defaultDestroyMethod: ");
    result.append(defaultDestroyMethod);
    result.append(", defaultLazyInit: ");
    result.append(defaultLazyInit);
    result.append(", defaultMerge: ");
    result.append(defaultMerge);
    result.append(", profile: ");
    result.append(profile);
    result.append(", description: ");
    result.append(description);
    result.append(')');
    return result.toString();
  }

} //ConfigurationImpl

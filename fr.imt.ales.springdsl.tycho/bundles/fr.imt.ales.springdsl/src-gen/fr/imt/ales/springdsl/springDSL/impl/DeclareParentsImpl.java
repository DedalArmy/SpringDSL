/**
 * generated by Xtext 2.18.0
 */
package fr.imt.ales.springdsl.springDSL.impl;

import fr.imt.ales.springdsl.springDSL.AopDefaultImplInterface;
import fr.imt.ales.springdsl.springDSL.AopDelegateImplRef;
import fr.imt.ales.springdsl.springDSL.DeclareParents;
import fr.imt.ales.springdsl.springDSL.Interface;
import fr.imt.ales.springdsl.springDSL.SpringDSLPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Declare Parents</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.DeclareParentsImpl#getTypeMatching <em>Type Matching</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.DeclareParentsImpl#getImplementInterface <em>Implement Interface</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.DeclareParentsImpl#getDefaultImplInterface <em>Default Impl Interface</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.DeclareParentsImpl#getDelegateImplRef <em>Delegate Impl Ref</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DeclareParentsImpl extends MinimalEObjectImpl.Container implements DeclareParents
{
  /**
   * The default value of the '{@link #getTypeMatching() <em>Type Matching</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeMatching()
   * @generated
   * @ordered
   */
  protected static final String TYPE_MATCHING_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTypeMatching() <em>Type Matching</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeMatching()
   * @generated
   * @ordered
   */
  protected String typeMatching = TYPE_MATCHING_EDEFAULT;

  /**
   * The cached value of the '{@link #getImplementInterface() <em>Implement Interface</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImplementInterface()
   * @generated
   * @ordered
   */
  protected Interface implementInterface;

  /**
   * The cached value of the '{@link #getDefaultImplInterface() <em>Default Impl Interface</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultImplInterface()
   * @generated
   * @ordered
   */
  protected AopDefaultImplInterface defaultImplInterface;

  /**
   * The cached value of the '{@link #getDelegateImplRef() <em>Delegate Impl Ref</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDelegateImplRef()
   * @generated
   * @ordered
   */
  protected AopDelegateImplRef delegateImplRef;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeclareParentsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SpringDSLPackage.Literals.DECLARE_PARENTS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTypeMatching()
  {
    return typeMatching;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTypeMatching(String newTypeMatching)
  {
    String oldTypeMatching = typeMatching;
    typeMatching = newTypeMatching;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringDSLPackage.DECLARE_PARENTS__TYPE_MATCHING, oldTypeMatching, typeMatching));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Interface getImplementInterface()
  {
    return implementInterface;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetImplementInterface(Interface newImplementInterface, NotificationChain msgs)
  {
    Interface oldImplementInterface = implementInterface;
    implementInterface = newImplementInterface;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SpringDSLPackage.DECLARE_PARENTS__IMPLEMENT_INTERFACE, oldImplementInterface, newImplementInterface);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setImplementInterface(Interface newImplementInterface)
  {
    if (newImplementInterface != implementInterface)
    {
      NotificationChain msgs = null;
      if (implementInterface != null)
        msgs = ((InternalEObject)implementInterface).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SpringDSLPackage.DECLARE_PARENTS__IMPLEMENT_INTERFACE, null, msgs);
      if (newImplementInterface != null)
        msgs = ((InternalEObject)newImplementInterface).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SpringDSLPackage.DECLARE_PARENTS__IMPLEMENT_INTERFACE, null, msgs);
      msgs = basicSetImplementInterface(newImplementInterface, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringDSLPackage.DECLARE_PARENTS__IMPLEMENT_INTERFACE, newImplementInterface, newImplementInterface));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AopDefaultImplInterface getDefaultImplInterface()
  {
    return defaultImplInterface;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDefaultImplInterface(AopDefaultImplInterface newDefaultImplInterface, NotificationChain msgs)
  {
    AopDefaultImplInterface oldDefaultImplInterface = defaultImplInterface;
    defaultImplInterface = newDefaultImplInterface;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SpringDSLPackage.DECLARE_PARENTS__DEFAULT_IMPL_INTERFACE, oldDefaultImplInterface, newDefaultImplInterface);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDefaultImplInterface(AopDefaultImplInterface newDefaultImplInterface)
  {
    if (newDefaultImplInterface != defaultImplInterface)
    {
      NotificationChain msgs = null;
      if (defaultImplInterface != null)
        msgs = ((InternalEObject)defaultImplInterface).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SpringDSLPackage.DECLARE_PARENTS__DEFAULT_IMPL_INTERFACE, null, msgs);
      if (newDefaultImplInterface != null)
        msgs = ((InternalEObject)newDefaultImplInterface).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SpringDSLPackage.DECLARE_PARENTS__DEFAULT_IMPL_INTERFACE, null, msgs);
      msgs = basicSetDefaultImplInterface(newDefaultImplInterface, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringDSLPackage.DECLARE_PARENTS__DEFAULT_IMPL_INTERFACE, newDefaultImplInterface, newDefaultImplInterface));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AopDelegateImplRef getDelegateImplRef()
  {
    return delegateImplRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDelegateImplRef(AopDelegateImplRef newDelegateImplRef, NotificationChain msgs)
  {
    AopDelegateImplRef oldDelegateImplRef = delegateImplRef;
    delegateImplRef = newDelegateImplRef;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SpringDSLPackage.DECLARE_PARENTS__DELEGATE_IMPL_REF, oldDelegateImplRef, newDelegateImplRef);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDelegateImplRef(AopDelegateImplRef newDelegateImplRef)
  {
    if (newDelegateImplRef != delegateImplRef)
    {
      NotificationChain msgs = null;
      if (delegateImplRef != null)
        msgs = ((InternalEObject)delegateImplRef).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SpringDSLPackage.DECLARE_PARENTS__DELEGATE_IMPL_REF, null, msgs);
      if (newDelegateImplRef != null)
        msgs = ((InternalEObject)newDelegateImplRef).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SpringDSLPackage.DECLARE_PARENTS__DELEGATE_IMPL_REF, null, msgs);
      msgs = basicSetDelegateImplRef(newDelegateImplRef, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringDSLPackage.DECLARE_PARENTS__DELEGATE_IMPL_REF, newDelegateImplRef, newDelegateImplRef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SpringDSLPackage.DECLARE_PARENTS__IMPLEMENT_INTERFACE:
        return basicSetImplementInterface(null, msgs);
      case SpringDSLPackage.DECLARE_PARENTS__DEFAULT_IMPL_INTERFACE:
        return basicSetDefaultImplInterface(null, msgs);
      case SpringDSLPackage.DECLARE_PARENTS__DELEGATE_IMPL_REF:
        return basicSetDelegateImplRef(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SpringDSLPackage.DECLARE_PARENTS__TYPE_MATCHING:
        return getTypeMatching();
      case SpringDSLPackage.DECLARE_PARENTS__IMPLEMENT_INTERFACE:
        return getImplementInterface();
      case SpringDSLPackage.DECLARE_PARENTS__DEFAULT_IMPL_INTERFACE:
        return getDefaultImplInterface();
      case SpringDSLPackage.DECLARE_PARENTS__DELEGATE_IMPL_REF:
        return getDelegateImplRef();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SpringDSLPackage.DECLARE_PARENTS__TYPE_MATCHING:
        setTypeMatching((String)newValue);
        return;
      case SpringDSLPackage.DECLARE_PARENTS__IMPLEMENT_INTERFACE:
        setImplementInterface((Interface)newValue);
        return;
      case SpringDSLPackage.DECLARE_PARENTS__DEFAULT_IMPL_INTERFACE:
        setDefaultImplInterface((AopDefaultImplInterface)newValue);
        return;
      case SpringDSLPackage.DECLARE_PARENTS__DELEGATE_IMPL_REF:
        setDelegateImplRef((AopDelegateImplRef)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SpringDSLPackage.DECLARE_PARENTS__TYPE_MATCHING:
        setTypeMatching(TYPE_MATCHING_EDEFAULT);
        return;
      case SpringDSLPackage.DECLARE_PARENTS__IMPLEMENT_INTERFACE:
        setImplementInterface((Interface)null);
        return;
      case SpringDSLPackage.DECLARE_PARENTS__DEFAULT_IMPL_INTERFACE:
        setDefaultImplInterface((AopDefaultImplInterface)null);
        return;
      case SpringDSLPackage.DECLARE_PARENTS__DELEGATE_IMPL_REF:
        setDelegateImplRef((AopDelegateImplRef)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SpringDSLPackage.DECLARE_PARENTS__TYPE_MATCHING:
        return TYPE_MATCHING_EDEFAULT == null ? typeMatching != null : !TYPE_MATCHING_EDEFAULT.equals(typeMatching);
      case SpringDSLPackage.DECLARE_PARENTS__IMPLEMENT_INTERFACE:
        return implementInterface != null;
      case SpringDSLPackage.DECLARE_PARENTS__DEFAULT_IMPL_INTERFACE:
        return defaultImplInterface != null;
      case SpringDSLPackage.DECLARE_PARENTS__DELEGATE_IMPL_REF:
        return delegateImplRef != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (typeMatching: ");
    result.append(typeMatching);
    result.append(')');
    return result.toString();
  }

} //DeclareParentsImpl

/**
 * generated by Xtext 2.18.0
 */
package fr.imt.ales.springdsl.springDSL.impl;

import fr.imt.ales.springdsl.springDSL.LoadTimeWeaver;
import fr.imt.ales.springdsl.springDSL.SpringDSLPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Load Time Weaver</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.LoadTimeWeaverImpl#getAspectjWeaving <em>Aspectj Weaving</em>}</li>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.LoadTimeWeaverImpl#getWeaverClass <em>Weaver Class</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LoadTimeWeaverImpl extends ContextImpl implements LoadTimeWeaver
{
  /**
   * The default value of the '{@link #getAspectjWeaving() <em>Aspectj Weaving</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAspectjWeaving()
   * @generated
   * @ordered
   */
  protected static final String ASPECTJ_WEAVING_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAspectjWeaving() <em>Aspectj Weaving</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAspectjWeaving()
   * @generated
   * @ordered
   */
  protected String aspectjWeaving = ASPECTJ_WEAVING_EDEFAULT;

  /**
   * The default value of the '{@link #getWeaverClass() <em>Weaver Class</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWeaverClass()
   * @generated
   * @ordered
   */
  protected static final String WEAVER_CLASS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getWeaverClass() <em>Weaver Class</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWeaverClass()
   * @generated
   * @ordered
   */
  protected String weaverClass = WEAVER_CLASS_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LoadTimeWeaverImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SpringDSLPackage.Literals.LOAD_TIME_WEAVER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAspectjWeaving()
  {
    return aspectjWeaving;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAspectjWeaving(String newAspectjWeaving)
  {
    String oldAspectjWeaving = aspectjWeaving;
    aspectjWeaving = newAspectjWeaving;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringDSLPackage.LOAD_TIME_WEAVER__ASPECTJ_WEAVING, oldAspectjWeaving, aspectjWeaving));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getWeaverClass()
  {
    return weaverClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWeaverClass(String newWeaverClass)
  {
    String oldWeaverClass = weaverClass;
    weaverClass = newWeaverClass;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringDSLPackage.LOAD_TIME_WEAVER__WEAVER_CLASS, oldWeaverClass, weaverClass));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SpringDSLPackage.LOAD_TIME_WEAVER__ASPECTJ_WEAVING:
        return getAspectjWeaving();
      case SpringDSLPackage.LOAD_TIME_WEAVER__WEAVER_CLASS:
        return getWeaverClass();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SpringDSLPackage.LOAD_TIME_WEAVER__ASPECTJ_WEAVING:
        setAspectjWeaving((String)newValue);
        return;
      case SpringDSLPackage.LOAD_TIME_WEAVER__WEAVER_CLASS:
        setWeaverClass((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SpringDSLPackage.LOAD_TIME_WEAVER__ASPECTJ_WEAVING:
        setAspectjWeaving(ASPECTJ_WEAVING_EDEFAULT);
        return;
      case SpringDSLPackage.LOAD_TIME_WEAVER__WEAVER_CLASS:
        setWeaverClass(WEAVER_CLASS_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SpringDSLPackage.LOAD_TIME_WEAVER__ASPECTJ_WEAVING:
        return ASPECTJ_WEAVING_EDEFAULT == null ? aspectjWeaving != null : !ASPECTJ_WEAVING_EDEFAULT.equals(aspectjWeaving);
      case SpringDSLPackage.LOAD_TIME_WEAVER__WEAVER_CLASS:
        return WEAVER_CLASS_EDEFAULT == null ? weaverClass != null : !WEAVER_CLASS_EDEFAULT.equals(weaverClass);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (aspectjWeaving: ");
    result.append(aspectjWeaving);
    result.append(", weaverClass: ");
    result.append(weaverClass);
    result.append(')');
    return result.toString();
  }

} //LoadTimeWeaverImpl

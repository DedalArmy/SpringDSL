/**
 * generated by Xtext 2.18.0
 */
package fr.imt.ales.springdsl.springDSL.impl;

import fr.imt.ales.springdsl.springDSL.AfterThowing;
import fr.imt.ales.springdsl.springDSL.SpringDSLPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>After Thowing</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.imt.ales.springdsl.springDSL.impl.AfterThowingImpl#getThrowingValue <em>Throwing Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AfterThowingImpl extends AdviseImpl implements AfterThowing
{
  /**
   * The default value of the '{@link #getThrowingValue() <em>Throwing Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThrowingValue()
   * @generated
   * @ordered
   */
  protected static final String THROWING_VALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getThrowingValue() <em>Throwing Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThrowingValue()
   * @generated
   * @ordered
   */
  protected String throwingValue = THROWING_VALUE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AfterThowingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SpringDSLPackage.Literals.AFTER_THOWING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getThrowingValue()
  {
    return throwingValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setThrowingValue(String newThrowingValue)
  {
    String oldThrowingValue = throwingValue;
    throwingValue = newThrowingValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringDSLPackage.AFTER_THOWING__THROWING_VALUE, oldThrowingValue, throwingValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SpringDSLPackage.AFTER_THOWING__THROWING_VALUE:
        return getThrowingValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SpringDSLPackage.AFTER_THOWING__THROWING_VALUE:
        setThrowingValue((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SpringDSLPackage.AFTER_THOWING__THROWING_VALUE:
        setThrowingValue(THROWING_VALUE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SpringDSLPackage.AFTER_THOWING__THROWING_VALUE:
        return THROWING_VALUE_EDEFAULT == null ? throwingValue != null : !THROWING_VALUE_EDEFAULT.equals(throwingValue);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (throwingValue: ");
    result.append(throwingValue);
    result.append(')');
    return result.toString();
  }

} //AfterThowingImpl

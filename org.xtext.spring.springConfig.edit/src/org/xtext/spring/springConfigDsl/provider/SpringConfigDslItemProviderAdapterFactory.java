/**
 * generated by Xtext 2.12.0
 */
package org.xtext.spring.springConfigDsl.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.xtext.spring.springConfigDsl.util.SpringConfigDslAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SpringConfigDslItemProviderAdapterFactory extends SpringConfigDslAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SpringConfigDslItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.SpringProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpringProjectItemProvider springProjectItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.SpringProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpringProjectAdapter() {
		if (springProjectItemProvider == null) {
			springProjectItemProvider = new SpringProjectItemProvider(this);
		}

		return springProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.AbstractKeyValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbstractKeyValueItemProvider abstractKeyValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.AbstractKeyValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbstractKeyValueAdapter() {
		if (abstractKeyValueItemProvider == null) {
			abstractKeyValueItemProvider = new AbstractKeyValueItemProvider(this);
		}

		return abstractKeyValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.AbstractArtefact} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbstractArtefactItemProvider abstractArtefactItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.AbstractArtefact}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbstractArtefactAdapter() {
		if (abstractArtefactItemProvider == null) {
			abstractArtefactItemProvider = new AbstractArtefactItemProvider(this);
		}

		return abstractArtefactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.Collection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollectionItemProvider collectionItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.Collection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollectionAdapter() {
		if (collectionItemProvider == null) {
			collectionItemProvider = new CollectionItemProvider(this);
		}

		return collectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.Configuration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationItemProvider configurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.Configuration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationAdapter() {
		if (configurationItemProvider == null) {
			configurationItemProvider = new ConfigurationItemProvider(this);
		}

		return configurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.Alias} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AliasItemProvider aliasItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.Alias}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAliasAdapter() {
		if (aliasItemProvider == null) {
			aliasItemProvider = new AliasItemProvider(this);
		}

		return aliasItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.Import} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportItemProvider importItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.Import}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportAdapter() {
		if (importItemProvider == null) {
			importItemProvider = new ImportItemProvider(this);
		}

		return importItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.Context} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextItemProvider contextItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.Context}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextAdapter() {
		if (contextItemProvider == null) {
			contextItemProvider = new ContextItemProvider(this);
		}

		return contextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.AnnotationConfig} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotationConfigItemProvider annotationConfigItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.AnnotationConfig}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnnotationConfigAdapter() {
		if (annotationConfigItemProvider == null) {
			annotationConfigItemProvider = new AnnotationConfigItemProvider(this);
		}

		return annotationConfigItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.ComponentScan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentScanItemProvider componentScanItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.ComponentScan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentScanAdapter() {
		if (componentScanItemProvider == null) {
			componentScanItemProvider = new ComponentScanItemProvider(this);
		}

		return componentScanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.IncludeFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IncludeFilterItemProvider includeFilterItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.IncludeFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIncludeFilterAdapter() {
		if (includeFilterItemProvider == null) {
			includeFilterItemProvider = new IncludeFilterItemProvider(this);
		}

		return includeFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.ExcludeFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExcludeFilterItemProvider excludeFilterItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.ExcludeFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExcludeFilterAdapter() {
		if (excludeFilterItemProvider == null) {
			excludeFilterItemProvider = new ExcludeFilterItemProvider(this);
		}

		return excludeFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.LoadTimeWeaver} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LoadTimeWeaverItemProvider loadTimeWeaverItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.LoadTimeWeaver}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLoadTimeWeaverAdapter() {
		if (loadTimeWeaverItemProvider == null) {
			loadTimeWeaverItemProvider = new LoadTimeWeaverItemProvider(this);
		}

		return loadTimeWeaverItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.MbeanExport} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MbeanExportItemProvider mbeanExportItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.MbeanExport}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMbeanExportAdapter() {
		if (mbeanExportItemProvider == null) {
			mbeanExportItemProvider = new MbeanExportItemProvider(this);
		}

		return mbeanExportItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.MbeanServer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MbeanServerItemProvider mbeanServerItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.MbeanServer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMbeanServerAdapter() {
		if (mbeanServerItemProvider == null) {
			mbeanServerItemProvider = new MbeanServerItemProvider(this);
		}

		return mbeanServerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.PropertyHolder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyHolderItemProvider propertyHolderItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.PropertyHolder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyHolderAdapter() {
		if (propertyHolderItemProvider == null) {
			propertyHolderItemProvider = new PropertyHolderItemProvider(this);
		}

		return propertyHolderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.PropertyPlaceholder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyPlaceholderItemProvider propertyPlaceholderItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.PropertyPlaceholder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyPlaceholderAdapter() {
		if (propertyPlaceholderItemProvider == null) {
			propertyPlaceholderItemProvider = new PropertyPlaceholderItemProvider(this);
		}

		return propertyPlaceholderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.PropertyOverride} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyOverrideItemProvider propertyOverrideItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.PropertyOverride}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyOverrideAdapter() {
		if (propertyOverrideItemProvider == null) {
			propertyOverrideItemProvider = new PropertyOverrideItemProvider(this);
		}

		return propertyOverrideItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.SpringConfigured} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpringConfiguredItemProvider springConfiguredItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.SpringConfigured}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpringConfiguredAdapter() {
		if (springConfiguredItemProvider == null) {
			springConfiguredItemProvider = new SpringConfiguredItemProvider(this);
		}

		return springConfiguredItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.Aspect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AspectItemProvider aspectItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.Aspect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAspectAdapter() {
		if (aspectItemProvider == null) {
			aspectItemProvider = new AspectItemProvider(this);
		}

		return aspectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.AopAspectJAutoproxy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AopAspectJAutoproxyItemProvider aopAspectJAutoproxyItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.AopAspectJAutoproxy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAopAspectJAutoproxyAdapter() {
		if (aopAspectJAutoproxyItemProvider == null) {
			aopAspectJAutoproxyItemProvider = new AopAspectJAutoproxyItemProvider(this);
		}

		return aopAspectJAutoproxyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.AopInclude} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AopIncludeItemProvider aopIncludeItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.AopInclude}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAopIncludeAdapter() {
		if (aopIncludeItemProvider == null) {
			aopIncludeItemProvider = new AopIncludeItemProvider(this);
		}

		return aopIncludeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.AopConfig} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AopConfigItemProvider aopConfigItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.AopConfig}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAopConfigAdapter() {
		if (aopConfigItemProvider == null) {
			aopConfigItemProvider = new AopConfigItemProvider(this);
		}

		return aopConfigItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.AopPointcut} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AopPointcutItemProvider aopPointcutItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.AopPointcut}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAopPointcutAdapter() {
		if (aopPointcutItemProvider == null) {
			aopPointcutItemProvider = new AopPointcutItemProvider(this);
		}

		return aopPointcutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.AopAdvisor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AopAdvisorItemProvider aopAdvisorItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.AopAdvisor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAopAdvisorAdapter() {
		if (aopAdvisorItemProvider == null) {
			aopAdvisorItemProvider = new AopAdvisorItemProvider(this);
		}

		return aopAdvisorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.AopAspect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AopAspectItemProvider aopAspectItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.AopAspect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAopAspectAdapter() {
		if (aopAspectItemProvider == null) {
			aopAspectItemProvider = new AopAspectItemProvider(this);
		}

		return aopAspectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.DeclareParents} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeclareParentsItemProvider declareParentsItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.DeclareParents}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeclareParentsAdapter() {
		if (declareParentsItemProvider == null) {
			declareParentsItemProvider = new DeclareParentsItemProvider(this);
		}

		return declareParentsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.Interface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterfaceItemProvider interfaceItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.Interface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterfaceAdapter() {
		if (interfaceItemProvider == null) {
			interfaceItemProvider = new InterfaceItemProvider(this);
		}

		return interfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.AopDefaultImplInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AopDefaultImplInterfaceItemProvider aopDefaultImplInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.AopDefaultImplInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAopDefaultImplInterfaceAdapter() {
		if (aopDefaultImplInterfaceItemProvider == null) {
			aopDefaultImplInterfaceItemProvider = new AopDefaultImplInterfaceItemProvider(this);
		}

		return aopDefaultImplInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.AopDelegateImplRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AopDelegateImplRefItemProvider aopDelegateImplRefItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.AopDelegateImplRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAopDelegateImplRefAdapter() {
		if (aopDelegateImplRefItemProvider == null) {
			aopDelegateImplRefItemProvider = new AopDelegateImplRefItemProvider(this);
		}

		return aopDelegateImplRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.Advise} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdviseItemProvider adviseItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.Advise}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdviseAdapter() {
		if (adviseItemProvider == null) {
			adviseItemProvider = new AdviseItemProvider(this);
		}

		return adviseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.BeforeAdvise} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BeforeAdviseItemProvider beforeAdviseItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.BeforeAdvise}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBeforeAdviseAdapter() {
		if (beforeAdviseItemProvider == null) {
			beforeAdviseItemProvider = new BeforeAdviseItemProvider(this);
		}

		return beforeAdviseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.AfterAdvise} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AfterAdviseItemProvider afterAdviseItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.AfterAdvise}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAfterAdviseAdapter() {
		if (afterAdviseItemProvider == null) {
			afterAdviseItemProvider = new AfterAdviseItemProvider(this);
		}

		return afterAdviseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.AroundAdvise} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AroundAdviseItemProvider aroundAdviseItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.AroundAdvise}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAroundAdviseAdapter() {
		if (aroundAdviseItemProvider == null) {
			aroundAdviseItemProvider = new AroundAdviseItemProvider(this);
		}

		return aroundAdviseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.AfterReturning} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AfterReturningItemProvider afterReturningItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.AfterReturning}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAfterReturningAdapter() {
		if (afterReturningItemProvider == null) {
			afterReturningItemProvider = new AfterReturningItemProvider(this);
		}

		return afterReturningItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.AfterThowing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AfterThowingItemProvider afterThowingItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.AfterThowing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAfterThowingAdapter() {
		if (afterThowingItemProvider == null) {
			afterThowingItemProvider = new AfterThowingItemProvider(this);
		}

		return afterThowingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.TxAdvise} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TxAdviseItemProvider txAdviseItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.TxAdvise}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTxAdviseAdapter() {
		if (txAdviseItemProvider == null) {
			txAdviseItemProvider = new TxAdviseItemProvider(this);
		}

		return txAdviseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.TxAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TxAttributeItemProvider txAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.TxAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTxAttributeAdapter() {
		if (txAttributeItemProvider == null) {
			txAttributeItemProvider = new TxAttributeItemProvider(this);
		}

		return txAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.TxMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TxMethodItemProvider txMethodItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.TxMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTxMethodAdapter() {
		if (txMethodItemProvider == null) {
			txMethodItemProvider = new TxMethodItemProvider(this);
		}

		return txMethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.TxJtaTransactionManager} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TxJtaTransactionManagerItemProvider txJtaTransactionManagerItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.TxJtaTransactionManager}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTxJtaTransactionManagerAdapter() {
		if (txJtaTransactionManagerItemProvider == null) {
			txJtaTransactionManagerItemProvider = new TxJtaTransactionManagerItemProvider(this);
		}

		return txJtaTransactionManagerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.Component} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentItemProvider componentItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.Component}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentAdapter() {
		if (componentItemProvider == null) {
			componentItemProvider = new ComponentItemProvider(this);
		}

		return componentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.CreationMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreationMethodItemProvider creationMethodItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.CreationMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreationMethodAdapter() {
		if (creationMethodItemProvider == null) {
			creationMethodItemProvider = new CreationMethodItemProvider(this);
		}

		return creationMethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.ClassOrFactory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassOrFactoryItemProvider classOrFactoryItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.ClassOrFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassOrFactoryAdapter() {
		if (classOrFactoryItemProvider == null) {
			classOrFactoryItemProvider = new ClassOrFactoryItemProvider(this);
		}

		return classOrFactoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.Factory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FactoryItemProvider factoryItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.Factory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFactoryAdapter() {
		if (factoryItemProvider == null) {
			factoryItemProvider = new FactoryItemProvider(this);
		}

		return factoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.Class} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassItemProvider classItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.Class}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassAdapter() {
		if (classItemProvider == null) {
			classItemProvider = new ClassItemProvider(this);
		}

		return classItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.AopScopedProxy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AopScopedProxyItemProvider aopScopedProxyItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.AopScopedProxy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAopScopedProxyAdapter() {
		if (aopScopedProxyItemProvider == null) {
			aopScopedProxyItemProvider = new AopScopedProxyItemProvider(this);
		}

		return aopScopedProxyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.Feature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureItemProvider featureItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.Feature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureAdapter() {
		if (featureItemProvider == null) {
			featureItemProvider = new FeatureItemProvider(this);
		}

		return featureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.Attribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeItemProvider attributeItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.Attribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAdapter() {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.Reference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferenceItemProvider referenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.Reference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferenceAdapter() {
		if (referenceItemProvider == null) {
			referenceItemProvider = new ReferenceItemProvider(this);
		}

		return referenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.LookupMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LookupMethodItemProvider lookupMethodItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.LookupMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLookupMethodAdapter() {
		if (lookupMethodItemProvider == null) {
			lookupMethodItemProvider = new LookupMethodItemProvider(this);
		}

		return lookupMethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.Qualifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QualifierItemProvider qualifierItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.Qualifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQualifierAdapter() {
		if (qualifierItemProvider == null) {
			qualifierItemProvider = new QualifierItemProvider(this);
		}

		return qualifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.Meta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetaItemProvider metaItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.Meta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetaAdapter() {
		if (metaItemProvider == null) {
			metaItemProvider = new MetaItemProvider(this);
		}

		return metaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.QualifierAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QualifierAttributeItemProvider qualifierAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.QualifierAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQualifierAttributeAdapter() {
		if (qualifierAttributeItemProvider == null) {
			qualifierAttributeItemProvider = new QualifierAttributeItemProvider(this);
		}

		return qualifierAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.sList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected sListItemProvider sListItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.sList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createsListAdapter() {
		if (sListItemProvider == null) {
			sListItemProvider = new sListItemProvider(this);
		}

		return sListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.sSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected sSetItemProvider sSetItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.sSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createsSetAdapter() {
		if (sSetItemProvider == null) {
			sSetItemProvider = new sSetItemProvider(this);
		}

		return sSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.Props} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropsItemProvider propsItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.Props}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropsAdapter() {
		if (propsItemProvider == null) {
			propsItemProvider = new PropsItemProvider(this);
		}

		return propsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.Prop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropItemProvider propItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.Prop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropAdapter() {
		if (propItemProvider == null) {
			propItemProvider = new PropItemProvider(this);
		}

		return propItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.Map} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MapItemProvider mapItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.Map}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMapAdapter() {
		if (mapItemProvider == null) {
			mapItemProvider = new MapItemProvider(this);
		}

		return mapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.MapEntry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MapEntryItemProvider mapEntryItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.MapEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMapEntryAdapter() {
		if (mapEntryItemProvider == null) {
			mapEntryItemProvider = new MapEntryItemProvider(this);
		}

		return mapEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.Key} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyItemProvider keyItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.Key}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyAdapter() {
		if (keyItemProvider == null) {
			keyItemProvider = new KeyItemProvider(this);
		}

		return keyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.UtilConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UtilConstantItemProvider utilConstantItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.UtilConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUtilConstantAdapter() {
		if (utilConstantItemProvider == null) {
			utilConstantItemProvider = new UtilConstantItemProvider(this);
		}

		return utilConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.UtilPropertyPath} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UtilPropertyPathItemProvider utilPropertyPathItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.UtilPropertyPath}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUtilPropertyPathAdapter() {
		if (utilPropertyPathItemProvider == null) {
			utilPropertyPathItemProvider = new UtilPropertyPathItemProvider(this);
		}

		return utilPropertyPathItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.UtilProperties} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UtilPropertiesItemProvider utilPropertiesItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.UtilProperties}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUtilPropertiesAdapter() {
		if (utilPropertiesItemProvider == null) {
			utilPropertiesItemProvider = new UtilPropertiesItemProvider(this);
		}

		return utilPropertiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.UtilList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UtilListItemProvider utilListItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.UtilList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUtilListAdapter() {
		if (utilListItemProvider == null) {
			utilListItemProvider = new UtilListItemProvider(this);
		}

		return utilListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.UtilMap} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UtilMapItemProvider utilMapItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.UtilMap}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUtilMapAdapter() {
		if (utilMapItemProvider == null) {
			utilMapItemProvider = new UtilMapItemProvider(this);
		}

		return utilMapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.UtilSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UtilSetItemProvider utilSetItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.UtilSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUtilSetAdapter() {
		if (utilSetItemProvider == null) {
			utilSetItemProvider = new UtilSetItemProvider(this);
		}

		return utilSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.PropertyFile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyFileItemProvider propertyFileItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.PropertyFile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyFileAdapter() {
		if (propertyFileItemProvider == null) {
			propertyFileItemProvider = new PropertyFileItemProvider(this);
		}

		return propertyFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.spring.springConfigDsl.DataString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataStringItemProvider dataStringItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.spring.springConfigDsl.DataString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataStringAdapter() {
		if (dataStringItemProvider == null) {
			dataStringItemProvider = new DataStringItemProvider(this);
		}

		return dataStringItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (springProjectItemProvider != null) springProjectItemProvider.dispose();
		if (abstractKeyValueItemProvider != null) abstractKeyValueItemProvider.dispose();
		if (abstractArtefactItemProvider != null) abstractArtefactItemProvider.dispose();
		if (collectionItemProvider != null) collectionItemProvider.dispose();
		if (configurationItemProvider != null) configurationItemProvider.dispose();
		if (aliasItemProvider != null) aliasItemProvider.dispose();
		if (importItemProvider != null) importItemProvider.dispose();
		if (contextItemProvider != null) contextItemProvider.dispose();
		if (annotationConfigItemProvider != null) annotationConfigItemProvider.dispose();
		if (componentScanItemProvider != null) componentScanItemProvider.dispose();
		if (includeFilterItemProvider != null) includeFilterItemProvider.dispose();
		if (excludeFilterItemProvider != null) excludeFilterItemProvider.dispose();
		if (loadTimeWeaverItemProvider != null) loadTimeWeaverItemProvider.dispose();
		if (mbeanExportItemProvider != null) mbeanExportItemProvider.dispose();
		if (mbeanServerItemProvider != null) mbeanServerItemProvider.dispose();
		if (propertyHolderItemProvider != null) propertyHolderItemProvider.dispose();
		if (propertyPlaceholderItemProvider != null) propertyPlaceholderItemProvider.dispose();
		if (propertyOverrideItemProvider != null) propertyOverrideItemProvider.dispose();
		if (springConfiguredItemProvider != null) springConfiguredItemProvider.dispose();
		if (aspectItemProvider != null) aspectItemProvider.dispose();
		if (aopAspectJAutoproxyItemProvider != null) aopAspectJAutoproxyItemProvider.dispose();
		if (aopIncludeItemProvider != null) aopIncludeItemProvider.dispose();
		if (aopConfigItemProvider != null) aopConfigItemProvider.dispose();
		if (aopPointcutItemProvider != null) aopPointcutItemProvider.dispose();
		if (aopAdvisorItemProvider != null) aopAdvisorItemProvider.dispose();
		if (aopAspectItemProvider != null) aopAspectItemProvider.dispose();
		if (declareParentsItemProvider != null) declareParentsItemProvider.dispose();
		if (interfaceItemProvider != null) interfaceItemProvider.dispose();
		if (aopDefaultImplInterfaceItemProvider != null) aopDefaultImplInterfaceItemProvider.dispose();
		if (aopDelegateImplRefItemProvider != null) aopDelegateImplRefItemProvider.dispose();
		if (adviseItemProvider != null) adviseItemProvider.dispose();
		if (beforeAdviseItemProvider != null) beforeAdviseItemProvider.dispose();
		if (afterAdviseItemProvider != null) afterAdviseItemProvider.dispose();
		if (aroundAdviseItemProvider != null) aroundAdviseItemProvider.dispose();
		if (afterReturningItemProvider != null) afterReturningItemProvider.dispose();
		if (afterThowingItemProvider != null) afterThowingItemProvider.dispose();
		if (txAdviseItemProvider != null) txAdviseItemProvider.dispose();
		if (txAttributeItemProvider != null) txAttributeItemProvider.dispose();
		if (txMethodItemProvider != null) txMethodItemProvider.dispose();
		if (txJtaTransactionManagerItemProvider != null) txJtaTransactionManagerItemProvider.dispose();
		if (componentItemProvider != null) componentItemProvider.dispose();
		if (creationMethodItemProvider != null) creationMethodItemProvider.dispose();
		if (classOrFactoryItemProvider != null) classOrFactoryItemProvider.dispose();
		if (factoryItemProvider != null) factoryItemProvider.dispose();
		if (classItemProvider != null) classItemProvider.dispose();
		if (aopScopedProxyItemProvider != null) aopScopedProxyItemProvider.dispose();
		if (featureItemProvider != null) featureItemProvider.dispose();
		if (attributeItemProvider != null) attributeItemProvider.dispose();
		if (referenceItemProvider != null) referenceItemProvider.dispose();
		if (lookupMethodItemProvider != null) lookupMethodItemProvider.dispose();
		if (qualifierItemProvider != null) qualifierItemProvider.dispose();
		if (metaItemProvider != null) metaItemProvider.dispose();
		if (qualifierAttributeItemProvider != null) qualifierAttributeItemProvider.dispose();
		if (sListItemProvider != null) sListItemProvider.dispose();
		if (sSetItemProvider != null) sSetItemProvider.dispose();
		if (propsItemProvider != null) propsItemProvider.dispose();
		if (propItemProvider != null) propItemProvider.dispose();
		if (mapItemProvider != null) mapItemProvider.dispose();
		if (mapEntryItemProvider != null) mapEntryItemProvider.dispose();
		if (keyItemProvider != null) keyItemProvider.dispose();
		if (utilConstantItemProvider != null) utilConstantItemProvider.dispose();
		if (utilPropertyPathItemProvider != null) utilPropertyPathItemProvider.dispose();
		if (utilPropertiesItemProvider != null) utilPropertiesItemProvider.dispose();
		if (utilListItemProvider != null) utilListItemProvider.dispose();
		if (utilMapItemProvider != null) utilMapItemProvider.dispose();
		if (utilSetItemProvider != null) utilSetItemProvider.dispose();
		if (propertyFileItemProvider != null) propertyFileItemProvider.dispose();
		if (dataStringItemProvider != null) dataStringItemProvider.dispose();
	}

}

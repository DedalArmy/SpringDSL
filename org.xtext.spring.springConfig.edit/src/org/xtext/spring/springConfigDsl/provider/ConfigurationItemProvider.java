/**
 * generated by Xtext 2.12.0
 */
package org.xtext.spring.springConfigDsl.provider;


import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.ItemProviderAdapter;
import org.eclipse.emf.edit.provider.ViewerNotification;

import org.xtext.spring.springConfigDsl.AutoWiredType;
import org.xtext.spring.springConfigDsl.Configuration;
import org.xtext.spring.springConfigDsl.SpringConfigDslFactory;
import org.xtext.spring.springConfigDsl.SpringConfigDslPackage;

/**
 * This is the item provider adapter for a {@link org.xtext.spring.springConfigDsl.Configuration} object.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ConfigurationItemProvider 
	extends ItemProviderAdapter
	implements
		IEditingDomainItemProvider,
		IStructuredItemContentProvider,
		ITreeItemContentProvider,
		IItemLabelProvider,
		IItemPropertySource {
	/**
	 * This constructs an instance from a factory and a notifier.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ConfigurationItemProvider(AdapterFactory adapterFactory) {
		super(adapterFactory);
	}

	/**
	 * This returns the property descriptors for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public List<IItemPropertyDescriptor> getPropertyDescriptors(Object object) {
		if (itemPropertyDescriptors == null) {
			super.getPropertyDescriptors(object);

			addDefaultAutowirePropertyDescriptor(object);
			addDefaultInitMethodPropertyDescriptor(object);
			addDefaultAutowireCandidatesPropertyDescriptor(object);
			addDefaultDestroyMethodPropertyDescriptor(object);
			addDefaultLazyInitPropertyDescriptor(object);
			addDefaultMergePropertyDescriptor(object);
			addProfilePropertyDescriptor(object);
			addDescriptionPropertyDescriptor(object);
		}
		return itemPropertyDescriptors;
	}

	/**
	 * This adds a property descriptor for the Default Autowire feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void addDefaultAutowirePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_Configuration_defaultAutowire_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_Configuration_defaultAutowire_feature", "_UI_Configuration_type"),
				 SpringConfigDslPackage.Literals.CONFIGURATION__DEFAULT_AUTOWIRE,
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Default Init Method feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void addDefaultInitMethodPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_Configuration_defaultInitMethod_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_Configuration_defaultInitMethod_feature", "_UI_Configuration_type"),
				 SpringConfigDslPackage.Literals.CONFIGURATION__DEFAULT_INIT_METHOD,
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Default Autowire Candidates feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void addDefaultAutowireCandidatesPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_Configuration_defaultAutowireCandidates_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_Configuration_defaultAutowireCandidates_feature", "_UI_Configuration_type"),
				 SpringConfigDslPackage.Literals.CONFIGURATION__DEFAULT_AUTOWIRE_CANDIDATES,
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Default Destroy Method feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void addDefaultDestroyMethodPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_Configuration_defaultDestroyMethod_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_Configuration_defaultDestroyMethod_feature", "_UI_Configuration_type"),
				 SpringConfigDslPackage.Literals.CONFIGURATION__DEFAULT_DESTROY_METHOD,
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Default Lazy Init feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void addDefaultLazyInitPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_Configuration_defaultLazyInit_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_Configuration_defaultLazyInit_feature", "_UI_Configuration_type"),
				 SpringConfigDslPackage.Literals.CONFIGURATION__DEFAULT_LAZY_INIT,
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Default Merge feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void addDefaultMergePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_Configuration_defaultMerge_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_Configuration_defaultMerge_feature", "_UI_Configuration_type"),
				 SpringConfigDslPackage.Literals.CONFIGURATION__DEFAULT_MERGE,
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Profile feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void addProfilePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_Configuration_profile_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_Configuration_profile_feature", "_UI_Configuration_type"),
				 SpringConfigDslPackage.Literals.CONFIGURATION__PROFILE,
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Description feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void addDescriptionPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_Configuration_description_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_Configuration_description_feature", "_UI_Configuration_type"),
				 SpringConfigDslPackage.Literals.CONFIGURATION__DESCRIPTION,
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This specifies how to implement {@link #getChildren} and is used to deduce an appropriate feature for an
	 * {@link org.eclipse.emf.edit.command.AddCommand}, {@link org.eclipse.emf.edit.command.RemoveCommand} or
	 * {@link org.eclipse.emf.edit.command.MoveCommand} in {@link #createCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Collection<? extends EStructuralFeature> getChildrenFeatures(Object object) {
		if (childrenFeatures == null) {
			super.getChildrenFeatures(object);
			childrenFeatures.add(SpringConfigDslPackage.Literals.CONFIGURATION__COMPONENTS);
			childrenFeatures.add(SpringConfigDslPackage.Literals.CONFIGURATION__ALIAS);
			childrenFeatures.add(SpringConfigDslPackage.Literals.CONFIGURATION__IMPORTS);
			childrenFeatures.add(SpringConfigDslPackage.Literals.CONFIGURATION__CONTEXTS);
			childrenFeatures.add(SpringConfigDslPackage.Literals.CONFIGURATION__ASPECTS);
			childrenFeatures.add(SpringConfigDslPackage.Literals.CONFIGURATION__UTIL_CONSTANTS);
			childrenFeatures.add(SpringConfigDslPackage.Literals.CONFIGURATION__UTIL_LISTS);
			childrenFeatures.add(SpringConfigDslPackage.Literals.CONFIGURATION__UTIL_MAPS);
			childrenFeatures.add(SpringConfigDslPackage.Literals.CONFIGURATION__UTIL_PROPERTIES);
			childrenFeatures.add(SpringConfigDslPackage.Literals.CONFIGURATION__UTIL_SETS);
			childrenFeatures.add(SpringConfigDslPackage.Literals.CONFIGURATION__UTIL_PROPERTIES_PATH);
			childrenFeatures.add(SpringConfigDslPackage.Literals.CONFIGURATION__TX_ADVICES);
			childrenFeatures.add(SpringConfigDslPackage.Literals.CONFIGURATION__TX_JTA_TRANSACTION_MANAGER);
			childrenFeatures.add(SpringConfigDslPackage.Literals.CONFIGURATION__CONFIGURATION_COMPOSITE);
		}
		return childrenFeatures;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EStructuralFeature getChildFeature(Object object, Object child) {
		// Check the type of the specified child object and return the proper feature to use for
		// adding (see {@link AddCommand}) it as a child.

		return super.getChildFeature(object, child);
	}

	/**
	 * This returns Configuration.gif.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object getImage(Object object) {
		return overlayImage(object, getResourceLocator().getImage("full/obj16/Configuration"));
	}

	/**
	 * This returns the label text for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getText(Object object) {
		AutoWiredType labelValue = ((Configuration)object).getDefaultAutowire();
		String label = labelValue == null ? null : labelValue.toString();
		return label == null || label.length() == 0 ?
			getString("_UI_Configuration_type") :
			getString("_UI_Configuration_type") + " " + label;
	}
	

	/**
	 * This handles model notifications by calling {@link #updateChildren} to update any cached
	 * children and by creating a viewer notification, which it passes to {@link #fireNotifyChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void notifyChanged(Notification notification) {
		updateChildren(notification);

		switch (notification.getFeatureID(Configuration.class)) {
			case SpringConfigDslPackage.CONFIGURATION__DEFAULT_AUTOWIRE:
			case SpringConfigDslPackage.CONFIGURATION__DEFAULT_INIT_METHOD:
			case SpringConfigDslPackage.CONFIGURATION__DEFAULT_AUTOWIRE_CANDIDATES:
			case SpringConfigDslPackage.CONFIGURATION__DEFAULT_DESTROY_METHOD:
			case SpringConfigDslPackage.CONFIGURATION__DEFAULT_LAZY_INIT:
			case SpringConfigDslPackage.CONFIGURATION__DEFAULT_MERGE:
			case SpringConfigDslPackage.CONFIGURATION__PROFILE:
			case SpringConfigDslPackage.CONFIGURATION__DESCRIPTION:
				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), false, true));
				return;
			case SpringConfigDslPackage.CONFIGURATION__COMPONENTS:
			case SpringConfigDslPackage.CONFIGURATION__ALIAS:
			case SpringConfigDslPackage.CONFIGURATION__IMPORTS:
			case SpringConfigDslPackage.CONFIGURATION__CONTEXTS:
			case SpringConfigDslPackage.CONFIGURATION__ASPECTS:
			case SpringConfigDslPackage.CONFIGURATION__UTIL_CONSTANTS:
			case SpringConfigDslPackage.CONFIGURATION__UTIL_LISTS:
			case SpringConfigDslPackage.CONFIGURATION__UTIL_MAPS:
			case SpringConfigDslPackage.CONFIGURATION__UTIL_PROPERTIES:
			case SpringConfigDslPackage.CONFIGURATION__UTIL_SETS:
			case SpringConfigDslPackage.CONFIGURATION__UTIL_PROPERTIES_PATH:
			case SpringConfigDslPackage.CONFIGURATION__TX_ADVICES:
			case SpringConfigDslPackage.CONFIGURATION__TX_JTA_TRANSACTION_MANAGER:
			case SpringConfigDslPackage.CONFIGURATION__CONFIGURATION_COMPOSITE:
				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), true, false));
				return;
		}
		super.notifyChanged(notification);
	}

	/**
	 * This adds {@link org.eclipse.emf.edit.command.CommandParameter}s describing the children
	 * that can be created under this object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected void collectNewChildDescriptors(Collection<Object> newChildDescriptors, Object object) {
		super.collectNewChildDescriptors(newChildDescriptors, object);

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__COMPONENTS,
				 SpringConfigDslFactory.eINSTANCE.createComponent()));

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__ALIAS,
				 SpringConfigDslFactory.eINSTANCE.createAlias()));

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__IMPORTS,
				 SpringConfigDslFactory.eINSTANCE.createImport()));

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__CONTEXTS,
				 SpringConfigDslFactory.eINSTANCE.createContext()));

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__CONTEXTS,
				 SpringConfigDslFactory.eINSTANCE.createAnnotationConfig()));

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__CONTEXTS,
				 SpringConfigDslFactory.eINSTANCE.createComponentScan()));

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__CONTEXTS,
				 SpringConfigDslFactory.eINSTANCE.createLoadTimeWeaver()));

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__CONTEXTS,
				 SpringConfigDslFactory.eINSTANCE.createMbeanExport()));

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__CONTEXTS,
				 SpringConfigDslFactory.eINSTANCE.createMbeanServer()));

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__CONTEXTS,
				 SpringConfigDslFactory.eINSTANCE.createPropertyHolder()));

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__CONTEXTS,
				 SpringConfigDslFactory.eINSTANCE.createPropertyPlaceholder()));

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__CONTEXTS,
				 SpringConfigDslFactory.eINSTANCE.createPropertyOverride()));

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__CONTEXTS,
				 SpringConfigDslFactory.eINSTANCE.createSpringConfigured()));

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__ASPECTS,
				 SpringConfigDslFactory.eINSTANCE.createAspect()));

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__ASPECTS,
				 SpringConfigDslFactory.eINSTANCE.createAopAspectJAutoproxy()));

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__ASPECTS,
				 SpringConfigDslFactory.eINSTANCE.createAopConfig()));

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__UTIL_CONSTANTS,
				 SpringConfigDslFactory.eINSTANCE.createUtilConstant()));

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__UTIL_LISTS,
				 SpringConfigDslFactory.eINSTANCE.createUtilList()));

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__UTIL_MAPS,
				 SpringConfigDslFactory.eINSTANCE.createUtilMap()));

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__UTIL_PROPERTIES,
				 SpringConfigDslFactory.eINSTANCE.createUtilProperties()));

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__UTIL_SETS,
				 SpringConfigDslFactory.eINSTANCE.createUtilSet()));

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__UTIL_PROPERTIES_PATH,
				 SpringConfigDslFactory.eINSTANCE.createUtilPropertyPath()));

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__TX_ADVICES,
				 SpringConfigDslFactory.eINSTANCE.createTxAdvise()));

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__TX_JTA_TRANSACTION_MANAGER,
				 SpringConfigDslFactory.eINSTANCE.createTxJtaTransactionManager()));

		newChildDescriptors.add
			(createChildParameter
				(SpringConfigDslPackage.Literals.CONFIGURATION__CONFIGURATION_COMPOSITE,
				 SpringConfigDslFactory.eINSTANCE.createConfiguration()));
	}

	/**
	 * Return the resource locator for this item provider's resources.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ResourceLocator getResourceLocator() {
		return SpringConfigDslEditPlugin.INSTANCE;
	}

}

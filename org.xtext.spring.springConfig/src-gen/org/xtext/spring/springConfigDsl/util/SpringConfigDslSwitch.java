/**
 * generated by Xtext 2.12.0
 */
package org.xtext.spring.springConfigDsl.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.spring.springConfigDsl.AbstractArtefact;
import org.xtext.spring.springConfigDsl.AbstractKeyValue;
import org.xtext.spring.springConfigDsl.Advise;
import org.xtext.spring.springConfigDsl.AfterAdvise;
import org.xtext.spring.springConfigDsl.AfterReturning;
import org.xtext.spring.springConfigDsl.AfterThowing;
import org.xtext.spring.springConfigDsl.Alias;
import org.xtext.spring.springConfigDsl.AnnotationConfig;
import org.xtext.spring.springConfigDsl.AopAdvisor;
import org.xtext.spring.springConfigDsl.AopAspect;
import org.xtext.spring.springConfigDsl.AopAspectJAutoproxy;
import org.xtext.spring.springConfigDsl.AopConfig;
import org.xtext.spring.springConfigDsl.AopDefaultImplInterface;
import org.xtext.spring.springConfigDsl.AopDelegateImplRef;
import org.xtext.spring.springConfigDsl.AopInclude;
import org.xtext.spring.springConfigDsl.AopPointcut;
import org.xtext.spring.springConfigDsl.AopScopedProxy;
import org.xtext.spring.springConfigDsl.AroundAdvise;
import org.xtext.spring.springConfigDsl.Aspect;
import org.xtext.spring.springConfigDsl.Attribute;
import org.xtext.spring.springConfigDsl.BeforeAdvise;
import org.xtext.spring.springConfigDsl.ClassOrFactory;
import org.xtext.spring.springConfigDsl.Collection;
import org.xtext.spring.springConfigDsl.Component;
import org.xtext.spring.springConfigDsl.ComponentScan;
import org.xtext.spring.springConfigDsl.Configuration;
import org.xtext.spring.springConfigDsl.Context;
import org.xtext.spring.springConfigDsl.CreationMethod;
import org.xtext.spring.springConfigDsl.DataString;
import org.xtext.spring.springConfigDsl.DeclareParents;
import org.xtext.spring.springConfigDsl.ExcludeFilter;
import org.xtext.spring.springConfigDsl.Factory;
import org.xtext.spring.springConfigDsl.Feature;
import org.xtext.spring.springConfigDsl.Import;
import org.xtext.spring.springConfigDsl.IncludeFilter;
import org.xtext.spring.springConfigDsl.Interface;
import org.xtext.spring.springConfigDsl.Key;
import org.xtext.spring.springConfigDsl.LoadTimeWeaver;
import org.xtext.spring.springConfigDsl.LookupMethod;
import org.xtext.spring.springConfigDsl.MVC;
import org.xtext.spring.springConfigDsl.Map;
import org.xtext.spring.springConfigDsl.MapEntry;
import org.xtext.spring.springConfigDsl.MbeanExport;
import org.xtext.spring.springConfigDsl.MbeanServer;
import org.xtext.spring.springConfigDsl.Meta;
import org.xtext.spring.springConfigDsl.Prop;
import org.xtext.spring.springConfigDsl.PropertyFile;
import org.xtext.spring.springConfigDsl.PropertyHolder;
import org.xtext.spring.springConfigDsl.PropertyOverride;
import org.xtext.spring.springConfigDsl.PropertyPlaceholder;
import org.xtext.spring.springConfigDsl.Props;
import org.xtext.spring.springConfigDsl.Qualifier;
import org.xtext.spring.springConfigDsl.QualifierAttribute;
import org.xtext.spring.springConfigDsl.Reference;
import org.xtext.spring.springConfigDsl.SpringConfigDslPackage;
import org.xtext.spring.springConfigDsl.SpringConfigured;
import org.xtext.spring.springConfigDsl.SpringProject;
import org.xtext.spring.springConfigDsl.TxAdvise;
import org.xtext.spring.springConfigDsl.TxAnnotation;
import org.xtext.spring.springConfigDsl.TxAttribute;
import org.xtext.spring.springConfigDsl.TxJtaTransactionManager;
import org.xtext.spring.springConfigDsl.TxMethod;
import org.xtext.spring.springConfigDsl.UtilConstant;
import org.xtext.spring.springConfigDsl.UtilList;
import org.xtext.spring.springConfigDsl.UtilMap;
import org.xtext.spring.springConfigDsl.UtilProperties;
import org.xtext.spring.springConfigDsl.UtilPropertyPath;
import org.xtext.spring.springConfigDsl.UtilSet;
import org.xtext.spring.springConfigDsl.sList;
import org.xtext.spring.springConfigDsl.sSet;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.spring.springConfigDsl.SpringConfigDslPackage
 * @generated
 */
public class SpringConfigDslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SpringConfigDslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SpringConfigDslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = SpringConfigDslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case SpringConfigDslPackage.SPRING_PROJECT:
      {
        SpringProject springProject = (SpringProject)theEObject;
        T result = caseSpringProject(springProject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.ABSTRACT_KEY_VALUE:
      {
        AbstractKeyValue abstractKeyValue = (AbstractKeyValue)theEObject;
        T result = caseAbstractKeyValue(abstractKeyValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.ABSTRACT_ARTEFACT:
      {
        AbstractArtefact abstractArtefact = (AbstractArtefact)theEObject;
        T result = caseAbstractArtefact(abstractArtefact);
        if (result == null) result = caseAbstractKeyValue(abstractArtefact);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.COLLECTION:
      {
        Collection collection = (Collection)theEObject;
        T result = caseCollection(collection);
        if (result == null) result = caseAbstractArtefact(collection);
        if (result == null) result = caseAbstractKeyValue(collection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.CONFIGURATION:
      {
        Configuration configuration = (Configuration)theEObject;
        T result = caseConfiguration(configuration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.MVC:
      {
        MVC mvc = (MVC)theEObject;
        T result = caseMVC(mvc);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.ALIAS:
      {
        Alias alias = (Alias)theEObject;
        T result = caseAlias(alias);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.IMPORT:
      {
        Import import_ = (Import)theEObject;
        T result = caseImport(import_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.CONTEXT:
      {
        Context context = (Context)theEObject;
        T result = caseContext(context);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.ANNOTATION_CONFIG:
      {
        AnnotationConfig annotationConfig = (AnnotationConfig)theEObject;
        T result = caseAnnotationConfig(annotationConfig);
        if (result == null) result = caseContext(annotationConfig);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.COMPONENT_SCAN:
      {
        ComponentScan componentScan = (ComponentScan)theEObject;
        T result = caseComponentScan(componentScan);
        if (result == null) result = caseContext(componentScan);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.INCLUDE_FILTER:
      {
        IncludeFilter includeFilter = (IncludeFilter)theEObject;
        T result = caseIncludeFilter(includeFilter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.EXCLUDE_FILTER:
      {
        ExcludeFilter excludeFilter = (ExcludeFilter)theEObject;
        T result = caseExcludeFilter(excludeFilter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.LOAD_TIME_WEAVER:
      {
        LoadTimeWeaver loadTimeWeaver = (LoadTimeWeaver)theEObject;
        T result = caseLoadTimeWeaver(loadTimeWeaver);
        if (result == null) result = caseContext(loadTimeWeaver);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.MBEAN_EXPORT:
      {
        MbeanExport mbeanExport = (MbeanExport)theEObject;
        T result = caseMbeanExport(mbeanExport);
        if (result == null) result = caseContext(mbeanExport);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.MBEAN_SERVER:
      {
        MbeanServer mbeanServer = (MbeanServer)theEObject;
        T result = caseMbeanServer(mbeanServer);
        if (result == null) result = caseContext(mbeanServer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.PROPERTY_HOLDER:
      {
        PropertyHolder propertyHolder = (PropertyHolder)theEObject;
        T result = casePropertyHolder(propertyHolder);
        if (result == null) result = caseContext(propertyHolder);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.PROPERTY_PLACEHOLDER:
      {
        PropertyPlaceholder propertyPlaceholder = (PropertyPlaceholder)theEObject;
        T result = casePropertyPlaceholder(propertyPlaceholder);
        if (result == null) result = casePropertyHolder(propertyPlaceholder);
        if (result == null) result = caseContext(propertyPlaceholder);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.PROPERTY_OVERRIDE:
      {
        PropertyOverride propertyOverride = (PropertyOverride)theEObject;
        T result = casePropertyOverride(propertyOverride);
        if (result == null) result = casePropertyHolder(propertyOverride);
        if (result == null) result = caseContext(propertyOverride);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.SPRING_CONFIGURED:
      {
        SpringConfigured springConfigured = (SpringConfigured)theEObject;
        T result = caseSpringConfigured(springConfigured);
        if (result == null) result = caseContext(springConfigured);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.ASPECT:
      {
        Aspect aspect = (Aspect)theEObject;
        T result = caseAspect(aspect);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.AOP_ASPECT_JAUTOPROXY:
      {
        AopAspectJAutoproxy aopAspectJAutoproxy = (AopAspectJAutoproxy)theEObject;
        T result = caseAopAspectJAutoproxy(aopAspectJAutoproxy);
        if (result == null) result = caseAspect(aopAspectJAutoproxy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.AOP_INCLUDE:
      {
        AopInclude aopInclude = (AopInclude)theEObject;
        T result = caseAopInclude(aopInclude);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.AOP_CONFIG:
      {
        AopConfig aopConfig = (AopConfig)theEObject;
        T result = caseAopConfig(aopConfig);
        if (result == null) result = caseAspect(aopConfig);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.AOP_POINTCUT:
      {
        AopPointcut aopPointcut = (AopPointcut)theEObject;
        T result = caseAopPointcut(aopPointcut);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.AOP_ADVISOR:
      {
        AopAdvisor aopAdvisor = (AopAdvisor)theEObject;
        T result = caseAopAdvisor(aopAdvisor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.AOP_ASPECT:
      {
        AopAspect aopAspect = (AopAspect)theEObject;
        T result = caseAopAspect(aopAspect);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.DECLARE_PARENTS:
      {
        DeclareParents declareParents = (DeclareParents)theEObject;
        T result = caseDeclareParents(declareParents);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.INTERFACE:
      {
        Interface interface_ = (Interface)theEObject;
        T result = caseInterface(interface_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.AOP_DEFAULT_IMPL_INTERFACE:
      {
        AopDefaultImplInterface aopDefaultImplInterface = (AopDefaultImplInterface)theEObject;
        T result = caseAopDefaultImplInterface(aopDefaultImplInterface);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.AOP_DELEGATE_IMPL_REF:
      {
        AopDelegateImplRef aopDelegateImplRef = (AopDelegateImplRef)theEObject;
        T result = caseAopDelegateImplRef(aopDelegateImplRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.ADVISE:
      {
        Advise advise = (Advise)theEObject;
        T result = caseAdvise(advise);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.BEFORE_ADVISE:
      {
        BeforeAdvise beforeAdvise = (BeforeAdvise)theEObject;
        T result = caseBeforeAdvise(beforeAdvise);
        if (result == null) result = caseAdvise(beforeAdvise);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.AFTER_ADVISE:
      {
        AfterAdvise afterAdvise = (AfterAdvise)theEObject;
        T result = caseAfterAdvise(afterAdvise);
        if (result == null) result = caseAdvise(afterAdvise);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.AROUND_ADVISE:
      {
        AroundAdvise aroundAdvise = (AroundAdvise)theEObject;
        T result = caseAroundAdvise(aroundAdvise);
        if (result == null) result = caseAdvise(aroundAdvise);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.AFTER_RETURNING:
      {
        AfterReturning afterReturning = (AfterReturning)theEObject;
        T result = caseAfterReturning(afterReturning);
        if (result == null) result = caseAdvise(afterReturning);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.AFTER_THOWING:
      {
        AfterThowing afterThowing = (AfterThowing)theEObject;
        T result = caseAfterThowing(afterThowing);
        if (result == null) result = caseAdvise(afterThowing);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.TX_ANNOTATION:
      {
        TxAnnotation txAnnotation = (TxAnnotation)theEObject;
        T result = caseTxAnnotation(txAnnotation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.TX_ADVISE:
      {
        TxAdvise txAdvise = (TxAdvise)theEObject;
        T result = caseTxAdvise(txAdvise);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.TX_ATTRIBUTE:
      {
        TxAttribute txAttribute = (TxAttribute)theEObject;
        T result = caseTxAttribute(txAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.TX_METHOD:
      {
        TxMethod txMethod = (TxMethod)theEObject;
        T result = caseTxMethod(txMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.TX_JTA_TRANSACTION_MANAGER:
      {
        TxJtaTransactionManager txJtaTransactionManager = (TxJtaTransactionManager)theEObject;
        T result = caseTxJtaTransactionManager(txJtaTransactionManager);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.COMPONENT:
      {
        Component component = (Component)theEObject;
        T result = caseComponent(component);
        if (result == null) result = caseAbstractArtefact(component);
        if (result == null) result = caseAbstractKeyValue(component);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.CREATION_METHOD:
      {
        CreationMethod creationMethod = (CreationMethod)theEObject;
        T result = caseCreationMethod(creationMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.CLASS_OR_FACTORY:
      {
        ClassOrFactory classOrFactory = (ClassOrFactory)theEObject;
        T result = caseClassOrFactory(classOrFactory);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.FACTORY:
      {
        Factory factory = (Factory)theEObject;
        T result = caseFactory(factory);
        if (result == null) result = caseClassOrFactory(factory);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.CLASS:
      {
        org.xtext.spring.springConfigDsl.Class class_ = (org.xtext.spring.springConfigDsl.Class)theEObject;
        T result = caseClass(class_);
        if (result == null) result = caseClassOrFactory(class_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.AOP_SCOPED_PROXY:
      {
        AopScopedProxy aopScopedProxy = (AopScopedProxy)theEObject;
        T result = caseAopScopedProxy(aopScopedProxy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.FEATURE:
      {
        Feature feature = (Feature)theEObject;
        T result = caseFeature(feature);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.ATTRIBUTE:
      {
        Attribute attribute = (Attribute)theEObject;
        T result = caseAttribute(attribute);
        if (result == null) result = caseAbstractArtefact(attribute);
        if (result == null) result = caseAbstractKeyValue(attribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.REFERENCE:
      {
        Reference reference = (Reference)theEObject;
        T result = caseReference(reference);
        if (result == null) result = caseAbstractArtefact(reference);
        if (result == null) result = caseAbstractKeyValue(reference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.LOOKUP_METHOD:
      {
        LookupMethod lookupMethod = (LookupMethod)theEObject;
        T result = caseLookupMethod(lookupMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.QUALIFIER:
      {
        Qualifier qualifier = (Qualifier)theEObject;
        T result = caseQualifier(qualifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.META:
      {
        Meta meta = (Meta)theEObject;
        T result = caseMeta(meta);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.QUALIFIER_ATTRIBUTE:
      {
        QualifierAttribute qualifierAttribute = (QualifierAttribute)theEObject;
        T result = caseQualifierAttribute(qualifierAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.SLIST:
      {
        sList sList = (sList)theEObject;
        T result = casesList(sList);
        if (result == null) result = caseCollection(sList);
        if (result == null) result = caseAbstractArtefact(sList);
        if (result == null) result = caseAbstractKeyValue(sList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.SSET:
      {
        sSet sSet = (sSet)theEObject;
        T result = casesSet(sSet);
        if (result == null) result = caseCollection(sSet);
        if (result == null) result = caseAbstractArtefact(sSet);
        if (result == null) result = caseAbstractKeyValue(sSet);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.PROPS:
      {
        Props props = (Props)theEObject;
        T result = caseProps(props);
        if (result == null) result = caseCollection(props);
        if (result == null) result = caseAbstractArtefact(props);
        if (result == null) result = caseAbstractKeyValue(props);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.PROP:
      {
        Prop prop = (Prop)theEObject;
        T result = caseProp(prop);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.MAP:
      {
        Map map = (Map)theEObject;
        T result = caseMap(map);
        if (result == null) result = caseCollection(map);
        if (result == null) result = caseAbstractArtefact(map);
        if (result == null) result = caseAbstractKeyValue(map);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.MAP_ENTRY:
      {
        MapEntry mapEntry = (MapEntry)theEObject;
        T result = caseMapEntry(mapEntry);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.KEY:
      {
        Key key = (Key)theEObject;
        T result = caseKey(key);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.UTIL_CONSTANT:
      {
        UtilConstant utilConstant = (UtilConstant)theEObject;
        T result = caseUtilConstant(utilConstant);
        if (result == null) result = caseAttribute(utilConstant);
        if (result == null) result = caseAbstractArtefact(utilConstant);
        if (result == null) result = caseAbstractKeyValue(utilConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.UTIL_PROPERTY_PATH:
      {
        UtilPropertyPath utilPropertyPath = (UtilPropertyPath)theEObject;
        T result = caseUtilPropertyPath(utilPropertyPath);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.UTIL_PROPERTIES:
      {
        UtilProperties utilProperties = (UtilProperties)theEObject;
        T result = caseUtilProperties(utilProperties);
        if (result == null) result = caseProps(utilProperties);
        if (result == null) result = caseCollection(utilProperties);
        if (result == null) result = caseAbstractArtefact(utilProperties);
        if (result == null) result = caseAbstractKeyValue(utilProperties);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.UTIL_LIST:
      {
        UtilList utilList = (UtilList)theEObject;
        T result = caseUtilList(utilList);
        if (result == null) result = casesList(utilList);
        if (result == null) result = caseCollection(utilList);
        if (result == null) result = caseAbstractArtefact(utilList);
        if (result == null) result = caseAbstractKeyValue(utilList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.UTIL_MAP:
      {
        UtilMap utilMap = (UtilMap)theEObject;
        T result = caseUtilMap(utilMap);
        if (result == null) result = caseMap(utilMap);
        if (result == null) result = caseCollection(utilMap);
        if (result == null) result = caseAbstractArtefact(utilMap);
        if (result == null) result = caseAbstractKeyValue(utilMap);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.UTIL_SET:
      {
        UtilSet utilSet = (UtilSet)theEObject;
        T result = caseUtilSet(utilSet);
        if (result == null) result = casesSet(utilSet);
        if (result == null) result = caseCollection(utilSet);
        if (result == null) result = caseAbstractArtefact(utilSet);
        if (result == null) result = caseAbstractKeyValue(utilSet);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.PROPERTY_FILE:
      {
        PropertyFile propertyFile = (PropertyFile)theEObject;
        T result = casePropertyFile(propertyFile);
        if (result == null) result = caseMVC(propertyFile);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringConfigDslPackage.DATA_STRING:
      {
        DataString dataString = (DataString)theEObject;
        T result = caseDataString(dataString);
        if (result == null) result = caseAbstractKeyValue(dataString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Spring Project</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Spring Project</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpringProject(SpringProject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Key Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Key Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractKeyValue(AbstractKeyValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Artefact</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Artefact</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractArtefact(AbstractArtefact object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collection</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collection</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollection(Collection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Configuration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Configuration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConfiguration(Configuration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>MVC</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>MVC</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMVC(MVC object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Alias</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Alias</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAlias(Alias object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImport(Import object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Context</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Context</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContext(Context object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Annotation Config</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Annotation Config</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnnotationConfig(AnnotationConfig object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component Scan</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component Scan</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentScan(ComponentScan object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Include Filter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Include Filter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIncludeFilter(IncludeFilter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exclude Filter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exclude Filter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExcludeFilter(ExcludeFilter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Load Time Weaver</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Load Time Weaver</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLoadTimeWeaver(LoadTimeWeaver object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mbean Export</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mbean Export</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMbeanExport(MbeanExport object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mbean Server</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mbean Server</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMbeanServer(MbeanServer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Holder</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Holder</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyHolder(PropertyHolder object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Placeholder</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Placeholder</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyPlaceholder(PropertyPlaceholder object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Override</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Override</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyOverride(PropertyOverride object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Spring Configured</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Spring Configured</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpringConfigured(SpringConfigured object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Aspect</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Aspect</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAspect(Aspect object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Aop Aspect JAutoproxy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Aop Aspect JAutoproxy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAopAspectJAutoproxy(AopAspectJAutoproxy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Aop Include</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Aop Include</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAopInclude(AopInclude object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Aop Config</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Aop Config</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAopConfig(AopConfig object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Aop Pointcut</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Aop Pointcut</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAopPointcut(AopPointcut object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Aop Advisor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Aop Advisor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAopAdvisor(AopAdvisor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Aop Aspect</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Aop Aspect</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAopAspect(AopAspect object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Declare Parents</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Declare Parents</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeclareParents(DeclareParents object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interface</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interface</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInterface(Interface object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Aop Default Impl Interface</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Aop Default Impl Interface</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAopDefaultImplInterface(AopDefaultImplInterface object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Aop Delegate Impl Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Aop Delegate Impl Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAopDelegateImplRef(AopDelegateImplRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Advise</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Advise</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAdvise(Advise object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Before Advise</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Before Advise</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBeforeAdvise(BeforeAdvise object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>After Advise</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>After Advise</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAfterAdvise(AfterAdvise object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Around Advise</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Around Advise</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAroundAdvise(AroundAdvise object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>After Returning</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>After Returning</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAfterReturning(AfterReturning object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>After Thowing</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>After Thowing</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAfterThowing(AfterThowing object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tx Annotation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tx Annotation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTxAnnotation(TxAnnotation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tx Advise</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tx Advise</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTxAdvise(TxAdvise object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tx Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tx Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTxAttribute(TxAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tx Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tx Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTxMethod(TxMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tx Jta Transaction Manager</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tx Jta Transaction Manager</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTxJtaTransactionManager(TxJtaTransactionManager object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponent(Component object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Creation Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Creation Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreationMethod(CreationMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Class Or Factory</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Class Or Factory</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClassOrFactory(ClassOrFactory object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Factory</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Factory</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFactory(Factory object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClass(org.xtext.spring.springConfigDsl.Class object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Aop Scoped Proxy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Aop Scoped Proxy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAopScopedProxy(AopScopedProxy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Feature</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Feature</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFeature(Feature object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttribute(Attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReference(Reference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Lookup Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Lookup Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLookupMethod(LookupMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Qualifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Qualifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQualifier(Qualifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Meta</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Meta</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMeta(Meta object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Qualifier Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Qualifier Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQualifierAttribute(QualifierAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>sList</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>sList</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casesList(sList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>sSet</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>sSet</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casesSet(sSet object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Props</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Props</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProps(Props object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Prop</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Prop</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProp(Prop object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMap(Map object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Entry</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Entry</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapEntry(MapEntry object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Key</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Key</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKey(Key object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Util Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Util Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUtilConstant(UtilConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Util Property Path</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Util Property Path</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUtilPropertyPath(UtilPropertyPath object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Util Properties</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Util Properties</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUtilProperties(UtilProperties object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Util List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Util List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUtilList(UtilList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Util Map</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Util Map</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUtilMap(UtilMap object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Util Set</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Util Set</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUtilSet(UtilSet object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property File</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property File</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyFile(PropertyFile object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataString(DataString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //SpringConfigDslSwitch

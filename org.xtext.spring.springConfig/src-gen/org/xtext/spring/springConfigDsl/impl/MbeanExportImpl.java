/**
 * generated by Xtext 2.12.0
 */
package org.xtext.spring.springConfigDsl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.spring.springConfigDsl.Component;
import org.xtext.spring.springConfigDsl.MbeanExport;
import org.xtext.spring.springConfigDsl.MbeanRegistrationEnum;
import org.xtext.spring.springConfigDsl.SpringConfigDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Mbean Export</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.spring.springConfigDsl.impl.MbeanExportImpl#getDefaultDomain <em>Default Domain</em>}</li>
 *   <li>{@link org.xtext.spring.springConfigDsl.impl.MbeanExportImpl#getRegistration <em>Registration</em>}</li>
 *   <li>{@link org.xtext.spring.springConfigDsl.impl.MbeanExportImpl#getServer <em>Server</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MbeanExportImpl extends ContextImpl implements MbeanExport
{
  /**
	 * The default value of the '{@link #getDefaultDomain() <em>Default Domain</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getDefaultDomain()
	 * @generated
	 * @ordered
	 */
  protected static final String DEFAULT_DOMAIN_EDEFAULT = null;

  /**
	 * The cached value of the '{@link #getDefaultDomain() <em>Default Domain</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getDefaultDomain()
	 * @generated
	 * @ordered
	 */
  protected String defaultDomain = DEFAULT_DOMAIN_EDEFAULT;

  /**
	 * The default value of the '{@link #getRegistration() <em>Registration</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getRegistration()
	 * @generated
	 * @ordered
	 */
  protected static final MbeanRegistrationEnum REGISTRATION_EDEFAULT = MbeanRegistrationEnum.FAILONEXISTING;

  /**
	 * The cached value of the '{@link #getRegistration() <em>Registration</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getRegistration()
	 * @generated
	 * @ordered
	 */
  protected MbeanRegistrationEnum registration = REGISTRATION_EDEFAULT;

  /**
	 * The cached value of the '{@link #getServer() <em>Server</em>}' reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getServer()
	 * @generated
	 * @ordered
	 */
  protected Component server;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected MbeanExportImpl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  protected EClass eStaticClass()
  {
		return SpringConfigDslPackage.Literals.MBEAN_EXPORT;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public String getDefaultDomain()
  {
		return defaultDomain;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setDefaultDomain(String newDefaultDomain)
  {
		String oldDefaultDomain = defaultDomain;
		defaultDomain = newDefaultDomain;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SpringConfigDslPackage.MBEAN_EXPORT__DEFAULT_DOMAIN, oldDefaultDomain, defaultDomain));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public MbeanRegistrationEnum getRegistration()
  {
		return registration;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setRegistration(MbeanRegistrationEnum newRegistration)
  {
		MbeanRegistrationEnum oldRegistration = registration;
		registration = newRegistration == null ? REGISTRATION_EDEFAULT : newRegistration;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SpringConfigDslPackage.MBEAN_EXPORT__REGISTRATION, oldRegistration, registration));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public Component getServer()
  {
		if (server != null && server.eIsProxy()) {
			InternalEObject oldServer = (InternalEObject)server;
			server = (Component)eResolveProxy(oldServer);
			if (server != oldServer) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, SpringConfigDslPackage.MBEAN_EXPORT__SERVER, oldServer, server));
			}
		}
		return server;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public Component basicGetServer()
  {
		return server;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setServer(Component newServer)
  {
		Component oldServer = server;
		server = newServer;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SpringConfigDslPackage.MBEAN_EXPORT__SERVER, oldServer, server));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
		switch (featureID) {
			case SpringConfigDslPackage.MBEAN_EXPORT__DEFAULT_DOMAIN:
				return getDefaultDomain();
			case SpringConfigDslPackage.MBEAN_EXPORT__REGISTRATION:
				return getRegistration();
			case SpringConfigDslPackage.MBEAN_EXPORT__SERVER:
				if (resolve) return getServer();
				return basicGetServer();
		}
		return super.eGet(featureID, resolve, coreType);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eSet(int featureID, Object newValue)
  {
		switch (featureID) {
			case SpringConfigDslPackage.MBEAN_EXPORT__DEFAULT_DOMAIN:
				setDefaultDomain((String)newValue);
				return;
			case SpringConfigDslPackage.MBEAN_EXPORT__REGISTRATION:
				setRegistration((MbeanRegistrationEnum)newValue);
				return;
			case SpringConfigDslPackage.MBEAN_EXPORT__SERVER:
				setServer((Component)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eUnset(int featureID)
  {
		switch (featureID) {
			case SpringConfigDslPackage.MBEAN_EXPORT__DEFAULT_DOMAIN:
				setDefaultDomain(DEFAULT_DOMAIN_EDEFAULT);
				return;
			case SpringConfigDslPackage.MBEAN_EXPORT__REGISTRATION:
				setRegistration(REGISTRATION_EDEFAULT);
				return;
			case SpringConfigDslPackage.MBEAN_EXPORT__SERVER:
				setServer((Component)null);
				return;
		}
		super.eUnset(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean eIsSet(int featureID)
  {
		switch (featureID) {
			case SpringConfigDslPackage.MBEAN_EXPORT__DEFAULT_DOMAIN:
				return DEFAULT_DOMAIN_EDEFAULT == null ? defaultDomain != null : !DEFAULT_DOMAIN_EDEFAULT.equals(defaultDomain);
			case SpringConfigDslPackage.MBEAN_EXPORT__REGISTRATION:
				return registration != REGISTRATION_EDEFAULT;
			case SpringConfigDslPackage.MBEAN_EXPORT__SERVER:
				return server != null;
		}
		return super.eIsSet(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public String toString()
  {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (defaultDomain: ");
		result.append(defaultDomain);
		result.append(", registration: ");
		result.append(registration);
		result.append(')');
		return result.toString();
	}

} //MbeanExportImpl

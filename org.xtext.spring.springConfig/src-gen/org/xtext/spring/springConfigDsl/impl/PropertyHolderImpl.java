/**
 * generated by Xtext 2.17.0
 */
package org.xtext.spring.springConfigDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.spring.springConfigDsl.Component;
import org.xtext.spring.springConfigDsl.PropertyFile;
import org.xtext.spring.springConfigDsl.PropertyHolder;
import org.xtext.spring.springConfigDsl.SpringConfigDslPackage;
import org.xtext.spring.springConfigDsl.sBoolean;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Property Holder</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.spring.springConfigDsl.impl.PropertyHolderImpl#getPropertyfile <em>Propertyfile</em>}</li>
 *   <li>{@link org.xtext.spring.springConfigDsl.impl.PropertyHolderImpl#getIgnoreResourceNotFound <em>Ignore Resource Not Found</em>}</li>
 *   <li>{@link org.xtext.spring.springConfigDsl.impl.PropertyHolderImpl#getIgnoreUnresolvable <em>Ignore Unresolvable</em>}</li>
 *   <li>{@link org.xtext.spring.springConfigDsl.impl.PropertyHolderImpl#getLocalOverride <em>Local Override</em>}</li>
 *   <li>{@link org.xtext.spring.springConfigDsl.impl.PropertyHolderImpl#getOrder <em>Order</em>}</li>
 *   <li>{@link org.xtext.spring.springConfigDsl.impl.PropertyHolderImpl#getPropertiesRef <em>Properties Ref</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PropertyHolderImpl extends ContextImpl implements PropertyHolder
{
  /**
   * The cached value of the '{@link #getPropertyfile() <em>Propertyfile</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPropertyfile()
   * @generated
   * @ordered
   */
  protected PropertyFile propertyfile;

  /**
   * The default value of the '{@link #getIgnoreResourceNotFound() <em>Ignore Resource Not Found</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIgnoreResourceNotFound()
   * @generated
   * @ordered
   */
  protected static final sBoolean IGNORE_RESOURCE_NOT_FOUND_EDEFAULT = sBoolean.FALSE;

  /**
   * The cached value of the '{@link #getIgnoreResourceNotFound() <em>Ignore Resource Not Found</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIgnoreResourceNotFound()
   * @generated
   * @ordered
   */
  protected sBoolean ignoreResourceNotFound = IGNORE_RESOURCE_NOT_FOUND_EDEFAULT;

  /**
   * The default value of the '{@link #getIgnoreUnresolvable() <em>Ignore Unresolvable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIgnoreUnresolvable()
   * @generated
   * @ordered
   */
  protected static final sBoolean IGNORE_UNRESOLVABLE_EDEFAULT = sBoolean.FALSE;

  /**
   * The cached value of the '{@link #getIgnoreUnresolvable() <em>Ignore Unresolvable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIgnoreUnresolvable()
   * @generated
   * @ordered
   */
  protected sBoolean ignoreUnresolvable = IGNORE_UNRESOLVABLE_EDEFAULT;

  /**
   * The default value of the '{@link #getLocalOverride() <em>Local Override</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLocalOverride()
   * @generated
   * @ordered
   */
  protected static final sBoolean LOCAL_OVERRIDE_EDEFAULT = sBoolean.FALSE;

  /**
   * The cached value of the '{@link #getLocalOverride() <em>Local Override</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLocalOverride()
   * @generated
   * @ordered
   */
  protected sBoolean localOverride = LOCAL_OVERRIDE_EDEFAULT;

  /**
   * The default value of the '{@link #getOrder() <em>Order</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrder()
   * @generated
   * @ordered
   */
  protected static final String ORDER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOrder() <em>Order</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrder()
   * @generated
   * @ordered
   */
  protected String order = ORDER_EDEFAULT;

  /**
   * The cached value of the '{@link #getPropertiesRef() <em>Properties Ref</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPropertiesRef()
   * @generated
   * @ordered
   */
  protected Component propertiesRef;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PropertyHolderImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SpringConfigDslPackage.Literals.PROPERTY_HOLDER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyFile getPropertyfile()
  {
    return propertyfile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPropertyfile(PropertyFile newPropertyfile, NotificationChain msgs)
  {
    PropertyFile oldPropertyfile = propertyfile;
    propertyfile = newPropertyfile;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SpringConfigDslPackage.PROPERTY_HOLDER__PROPERTYFILE, oldPropertyfile, newPropertyfile);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPropertyfile(PropertyFile newPropertyfile)
  {
    if (newPropertyfile != propertyfile)
    {
      NotificationChain msgs = null;
      if (propertyfile != null)
        msgs = ((InternalEObject)propertyfile).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SpringConfigDslPackage.PROPERTY_HOLDER__PROPERTYFILE, null, msgs);
      if (newPropertyfile != null)
        msgs = ((InternalEObject)newPropertyfile).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SpringConfigDslPackage.PROPERTY_HOLDER__PROPERTYFILE, null, msgs);
      msgs = basicSetPropertyfile(newPropertyfile, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringConfigDslPackage.PROPERTY_HOLDER__PROPERTYFILE, newPropertyfile, newPropertyfile));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public sBoolean getIgnoreResourceNotFound()
  {
    return ignoreResourceNotFound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIgnoreResourceNotFound(sBoolean newIgnoreResourceNotFound)
  {
    sBoolean oldIgnoreResourceNotFound = ignoreResourceNotFound;
    ignoreResourceNotFound = newIgnoreResourceNotFound == null ? IGNORE_RESOURCE_NOT_FOUND_EDEFAULT : newIgnoreResourceNotFound;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringConfigDslPackage.PROPERTY_HOLDER__IGNORE_RESOURCE_NOT_FOUND, oldIgnoreResourceNotFound, ignoreResourceNotFound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public sBoolean getIgnoreUnresolvable()
  {
    return ignoreUnresolvable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIgnoreUnresolvable(sBoolean newIgnoreUnresolvable)
  {
    sBoolean oldIgnoreUnresolvable = ignoreUnresolvable;
    ignoreUnresolvable = newIgnoreUnresolvable == null ? IGNORE_UNRESOLVABLE_EDEFAULT : newIgnoreUnresolvable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringConfigDslPackage.PROPERTY_HOLDER__IGNORE_UNRESOLVABLE, oldIgnoreUnresolvable, ignoreUnresolvable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public sBoolean getLocalOverride()
  {
    return localOverride;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLocalOverride(sBoolean newLocalOverride)
  {
    sBoolean oldLocalOverride = localOverride;
    localOverride = newLocalOverride == null ? LOCAL_OVERRIDE_EDEFAULT : newLocalOverride;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringConfigDslPackage.PROPERTY_HOLDER__LOCAL_OVERRIDE, oldLocalOverride, localOverride));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOrder()
  {
    return order;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOrder(String newOrder)
  {
    String oldOrder = order;
    order = newOrder;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringConfigDslPackage.PROPERTY_HOLDER__ORDER, oldOrder, order));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Component getPropertiesRef()
  {
    if (propertiesRef != null && propertiesRef.eIsProxy())
    {
      InternalEObject oldPropertiesRef = (InternalEObject)propertiesRef;
      propertiesRef = (Component)eResolveProxy(oldPropertiesRef);
      if (propertiesRef != oldPropertiesRef)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SpringConfigDslPackage.PROPERTY_HOLDER__PROPERTIES_REF, oldPropertiesRef, propertiesRef));
      }
    }
    return propertiesRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Component basicGetPropertiesRef()
  {
    return propertiesRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPropertiesRef(Component newPropertiesRef)
  {
    Component oldPropertiesRef = propertiesRef;
    propertiesRef = newPropertiesRef;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringConfigDslPackage.PROPERTY_HOLDER__PROPERTIES_REF, oldPropertiesRef, propertiesRef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SpringConfigDslPackage.PROPERTY_HOLDER__PROPERTYFILE:
        return basicSetPropertyfile(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SpringConfigDslPackage.PROPERTY_HOLDER__PROPERTYFILE:
        return getPropertyfile();
      case SpringConfigDslPackage.PROPERTY_HOLDER__IGNORE_RESOURCE_NOT_FOUND:
        return getIgnoreResourceNotFound();
      case SpringConfigDslPackage.PROPERTY_HOLDER__IGNORE_UNRESOLVABLE:
        return getIgnoreUnresolvable();
      case SpringConfigDslPackage.PROPERTY_HOLDER__LOCAL_OVERRIDE:
        return getLocalOverride();
      case SpringConfigDslPackage.PROPERTY_HOLDER__ORDER:
        return getOrder();
      case SpringConfigDslPackage.PROPERTY_HOLDER__PROPERTIES_REF:
        if (resolve) return getPropertiesRef();
        return basicGetPropertiesRef();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SpringConfigDslPackage.PROPERTY_HOLDER__PROPERTYFILE:
        setPropertyfile((PropertyFile)newValue);
        return;
      case SpringConfigDslPackage.PROPERTY_HOLDER__IGNORE_RESOURCE_NOT_FOUND:
        setIgnoreResourceNotFound((sBoolean)newValue);
        return;
      case SpringConfigDslPackage.PROPERTY_HOLDER__IGNORE_UNRESOLVABLE:
        setIgnoreUnresolvable((sBoolean)newValue);
        return;
      case SpringConfigDslPackage.PROPERTY_HOLDER__LOCAL_OVERRIDE:
        setLocalOverride((sBoolean)newValue);
        return;
      case SpringConfigDslPackage.PROPERTY_HOLDER__ORDER:
        setOrder((String)newValue);
        return;
      case SpringConfigDslPackage.PROPERTY_HOLDER__PROPERTIES_REF:
        setPropertiesRef((Component)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SpringConfigDslPackage.PROPERTY_HOLDER__PROPERTYFILE:
        setPropertyfile((PropertyFile)null);
        return;
      case SpringConfigDslPackage.PROPERTY_HOLDER__IGNORE_RESOURCE_NOT_FOUND:
        setIgnoreResourceNotFound(IGNORE_RESOURCE_NOT_FOUND_EDEFAULT);
        return;
      case SpringConfigDslPackage.PROPERTY_HOLDER__IGNORE_UNRESOLVABLE:
        setIgnoreUnresolvable(IGNORE_UNRESOLVABLE_EDEFAULT);
        return;
      case SpringConfigDslPackage.PROPERTY_HOLDER__LOCAL_OVERRIDE:
        setLocalOverride(LOCAL_OVERRIDE_EDEFAULT);
        return;
      case SpringConfigDslPackage.PROPERTY_HOLDER__ORDER:
        setOrder(ORDER_EDEFAULT);
        return;
      case SpringConfigDslPackage.PROPERTY_HOLDER__PROPERTIES_REF:
        setPropertiesRef((Component)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SpringConfigDslPackage.PROPERTY_HOLDER__PROPERTYFILE:
        return propertyfile != null;
      case SpringConfigDslPackage.PROPERTY_HOLDER__IGNORE_RESOURCE_NOT_FOUND:
        return ignoreResourceNotFound != IGNORE_RESOURCE_NOT_FOUND_EDEFAULT;
      case SpringConfigDslPackage.PROPERTY_HOLDER__IGNORE_UNRESOLVABLE:
        return ignoreUnresolvable != IGNORE_UNRESOLVABLE_EDEFAULT;
      case SpringConfigDslPackage.PROPERTY_HOLDER__LOCAL_OVERRIDE:
        return localOverride != LOCAL_OVERRIDE_EDEFAULT;
      case SpringConfigDslPackage.PROPERTY_HOLDER__ORDER:
        return ORDER_EDEFAULT == null ? order != null : !ORDER_EDEFAULT.equals(order);
      case SpringConfigDslPackage.PROPERTY_HOLDER__PROPERTIES_REF:
        return propertiesRef != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (ignoreResourceNotFound: ");
    result.append(ignoreResourceNotFound);
    result.append(", ignoreUnresolvable: ");
    result.append(ignoreUnresolvable);
    result.append(", localOverride: ");
    result.append(localOverride);
    result.append(", order: ");
    result.append(order);
    result.append(')');
    return result.toString();
  }

} //PropertyHolderImpl
